%!PS-Adobe-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.4 (Build 20F71) Quartz PS Context)
%%Title: (Italic_pdf.pdf)
%%Creator: (Preview: cgpdftops CUPS filter)
%%CreationDate: (Friday, September 03 2021 11:17:43 EDT)
%%For: (System Administrator)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%PageOrder: Ascend
%RBINumCopies: 1
%%Pages: (atend)
%%BoundingBox: (atend)
%%EndComments
userdict/dscInfo 5 dict dup begin
/Title(Italic_pdf.pdf)def
/Creator(Preview: cgpdftops CUPS filter)def
/CreationDate(Friday, September 03 2021 11:17:43 EDT)def
/For(System Administrator)def
/Pages 1 def
end put
%%BeginProlog
%%BeginFile: lw8_errorhandler-2.0
/currentpacking where 
	{ pop /oldpack currentpacking def /setpacking where
		{
			pop false setpacking
		}if
	}if
/$brkpage 64 dict def $brkpage begin
/prnt
 {dup type/stringtype ne{=string cvs}if dup length 6 mul/tx exch def/ty 10 def
  currentpoint/toy exch def/tox exch def 1 setgray newpath
  tox toy 2 sub moveto 0 ty rlineto tx 0 rlineto 0 ty neg rlineto
  closepath fill tox toy moveto 0 setgray show}bind def
/nl{currentpoint exch pop lmargin exch moveto 0 -10 rmoveto}def
/=={/cp 0 def typeprint nl}def
/typeprint{dup type exec}readonly def
/lmargin 72 def
/rmargin 72 def
/tprint
   {dup length cp add rmargin gt{nl/cp 0 def}if
    dup length cp add/cp exch def prnt}readonly def
/cvsprint{=string cvs tprint( )tprint}readonly def
/integertype{cvsprint}readonly def
/realtype{cvsprint}readonly def
/booleantype{cvsprint}readonly def
/operatortype{(--)tprint =string cvs tprint(-- )tprint}readonly def
/marktype{pop(-mark- )tprint}readonly def
/dicttype{pop(-dictionary- )tprint}readonly def
/nulltype{pop(-null- )tprint}readonly def
/filetype{pop(-filestream- )tprint}readonly def
/savetype{pop(-savelevel- )tprint}readonly def
/fonttype{pop(-fontid- )tprint}readonly def
/nametype{dup xcheck not{(/)tprint}if cvsprint}readonly def
/stringtype
 {dup rcheck{(\()tprint tprint(\))tprint}{pop(-string- )tprint}ifelse
 }readonly def
/arraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-array- )tprint}ifelse
 }readonly def
/packedarraytype
 {dup rcheck{dup xcheck
  {({)tprint{typeprint}forall(})tprint}
  {([)tprint{typeprint}forall(])tprint}ifelse}{pop(-packedarray- )tprint}ifelse
 }readonly def
/courier/Courier findfont 10 scalefont def
end %$brkpage
errordict/handleerror
 {systemdict begin $error begin $brkpage begin newerror
   {/newerror false store 
    vmstatus pop pop 0 ne{grestoreall}if initgraphics courier setfont
    lmargin 720 moveto(ERROR: )prnt errorname prnt
    nl(OFFENDING COMMAND: )prnt/command load prnt
 	$error/ostack known{
	$error/ostack get type dup/arraytype eq exch /packedarraytype eq or
   {nl nl(STACK:)prnt nl nl $error/ostack get aload length{==}repeat}if}if
    systemdict/showpage get exec(%%[ Error: )print
    errorname =print(; OffendingCommand: )print/command 
    load =print( ]%%)= flush}if end end end}
dup 0 systemdict put dup 4 $brkpage put bind readonly put
/currentpacking where 
	{ pop  /setpacking where
		{
			pop oldpack setpacking
		}if
	}if
%%EndFile
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
% Disable CTRL-D as an end-of-file marker...
userdict dup(\004)cvn{}put (\004\004)cvn{}put
[{
%%BeginFeature: *Resolution 600x600dpi

    <</HWResolution [600 600] /PreRenderingEnhance false>> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *Smoothing PrinterDefault
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPOption_Tray3 False
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPStraightPaperPath False
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPPaperPolicy PromptUser

   <</DeferredMediaSelection true>> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPEconoMode PrinterDefault
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *MediaType Unspecified

    <</ManualFeed false /MediaType null >> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *ManualFeed False

	<</ManualFeed false>> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *PageSize Letter

  <</PageSize [612 792] /ImagingBBox null>> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *Duplex None

  <</Duplex false>> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPManualDuplexSwitch False
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPManualDuplexPrintGuide False
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPManualDuplexOrientation DuplexNoTumble
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPBookletFilter False
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPBookletBackCover False
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPBookletPageOrder False
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPwmBrightness Medium
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPBookletScaling Proportional
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPwmTextMessage Draft
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPwmTextStyle Medium
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPwmFontName HelveticaB
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPwmFontSize pt48
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPwmTextAngle Deg45
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPBookletPageSize Letter
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPwmPages AllPages
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPwmSwitch False
%%EndFeature
} stopped cleartomark
% x y w h ESPrc - Clip to a rectangle.
userdict/ESPrc/rectclip where{pop/rectclip load}
{{newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath clip newpath}bind}ifelse put
% x y w h ESPrf - Fill a rectangle.
userdict/ESPrf/rectfill where{pop/rectfill load}
{{gsave newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath fill grestore}bind}ifelse put
% x y w h ESPrs - Stroke a rectangle.
userdict/ESPrs/rectstroke where{pop/rectstroke load}
{{gsave newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath stroke grestore}bind}ifelse put
userdict/ESPwl{}bind put
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 612 792
%%BeginPageSetup
%%EndPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: MVLBZB+LMRoman10-Regular
%!FontType1-1.0: MVLBZB+LMRoman10-Regular 2.004%%CreationDate: 9/3/21% Copyright 2021 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (2.004) readonly def/FullName (LMRoman10-Regular) readonly def/FamilyName (LMRoman10) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -146 def/UnderlineThickness 40 defend readonly def/FontName /MVLBZB+LMRoman10-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /T putdup 34 /h putdup 35 /i putdup 36 /s putdup 37 /t putdup 38 /e putdup 39 /x putdup 40 /a putdup 41 /l putdup 42 /c putdup 43 /period putdup 44 /one putreadonly def/FontBBox {-430 -290 1417 1127} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEF1C23F12D96A5680DF31DC052ABE0F5A1C840D2EFBA85CFD1384AB05F2D23BBCE9AD75B5C2DA1CC89B858332392D0F73F0BBDB54D15AFCEE3F409A19C7A7A5616F2C9C823B6F05195028E9D0A45EE0C41CC837B103F90D40BA61B0CAFB6830772503677EFE5CF15D5567994C7DEFCBA4D3F933105163FF00D6236F766CA3961CD8E89F19AE7F5CEA13C2FFFBC2386B9469B21A04789CFB30852AA558353725B7492FF6C67219A170F350C74C5D82F8ED343FAE76286B2EF23F4F272109F4E9821C761191CB87E06FBA264CC3E9E2F07A75C9556CAC622F629CEA9CB9C1C827BD179B0C0DDAB44F4BFBC2285DEFA5856B77EBBFEDF724BD27112D7DEE5FAB4FF4116227DE56D557692A83FA8E4AF5411578CDD5A7B640AD67B7D8C82286086FB2DD9D197BCF9B415FFB71A809445129236588F14C8963DA39D64267AC4444EC88FFAA59C40857D15044A1F5717514C92EB4531C6F653924B1FCE3E95BD782F73D8019A5D995926240B535BB0FF267CD6A983E03828C99772CD58D682FDC15D8D04B65DF407D18B8618C266882F354D48365A8B34DD7C103170E3B0918BE497C25723B49602FF661FC2940F98B1C4D7C46D3398E4C2569CF326ACF753B8014F4AE00403C7CC669657EEAD21A83858094E9A4EA33D8784E112BF1E498DC5176AA789EE1EB1F68FACF18D970FCA9555E080DAACD126A3D2425EA746CDDB6E229DC0AAC6D54BC74C36C334CE193BF6C9A2D38BA5AACCAF374C2C66AF7815611E6576E866650D7C3287789AB7360E1ED6707C954E4DD14BBB17B74708A57561AC1DB32DEE4CE0BA8837572B1C4C252AF01B86DEF1125CD2216A5197B9A75E7D642CDCB55FCAF67B0288A282D2140EA4143B4A95145ED9FB475F1B64C4F494723B665D5E19621A98B6E62B66E84316C75DAFA6D1AEBC76C8E82A83681DD2910F462D89C90517F1CF0AC34065FCD56937AFADC0959C968F72D193A2FE1270D5BB15DA86C0382BD7202992079FE0E5C3F627312957E0D033481A14CFFFE822E68FB25B7BCD281694D1427EFF55A9A4515301EB72B73D3F9EB941B22C3D7EC62D668E25337533DCAF80ED4DAF2A40984F26E7189989EC8DA7668F51E5C715761201F7C22102D07587AED8B3E135B53B45858DA26EC62E92815B365DFC7F394D2E0F65C9CFBAC62BF01EE74AF77D21250A05DB07C9F11A01C3C01AE3CB4702A6D09E3EC75DC395F5D7A958B2EBC053FB2044A639FD177DE6950C568B0E6B133D0A07F7FF85DE5BB187DFCA0966073B344BB7AD0C5D65C8F4C113C4B12DC8C3F6B27B54BCA4B23FCDAE1E9534AADE1D7C94E3BC96319470D68BB1A731A7000F322352EA3447CDCCE16B300DA32F511B17BE616F6B09AE463A8FFF5E72DFF7789DDCB3BC2BE2A5B7F689B3C139C44584A3308D4235753046A85928BC519560A3895A6D43209A635896666CB07A22CA37FFEA517C05422C9616DDB4554DA76ABBE220F32CA977AD112B6B5DD76156B094F50A04485658CFC59B079E464D3D7213B44303608A0439AED9C410E536E3A807927628CB12DEB9DA1730824E47F8DCE784711AF44F1154CD5DC3E72D7B58A7738203B41062FC9FE8219177EA63AE118087EE85C985B6D35870A31CFA0D398BBAD04966593CC3642A1D236CC0AA34B871A9DB33B816460601DEE7D22B7208E1EEAAC146FF437AB17F74AF08D851CA2433737A8969D17F4337F2072955EE04561E448D36AB1FFDAF659386B0CE938A15BCF5CE9ACA222EDD985081FABA16AE51355EB668F1319E8E8645B16B1C7B2DB5995FF032D5CF4621853F45F813E2185022B50C78DB586338ED6ED630A715D4ECF5E14EFDDD8551F3005859C592E9C60BE74558376C290E961F322A435EC515721D79F41973EAF6DD66D7F6FC554B98EEB615C09F2C1F890E0F0B7BC6267D1364808D165568D749A2DE62CC34E91D1816F59D35CF0CB4CAFDC54F96CB69764467EEAC77BD43DDB93EF7A09EDBAAEC5240D21FD92334BC56220D31633A8D2231F453BDA42C0E12A02FADF3117B7A4B26645F1AEC40BCAE7B8423CCB2395153C993441F95932FD6EA686802911A2EC6F30B402EA0617496AD0CE3E1F090224F59CFBC320720C706941DC380AF180420BA13EE9B820509680EB636CECEA3A8D5F11640F6C1D6A6CE65A172CBDA4F9FE2543A9AF70AEDE8C9C384098AD4C5B8C8C2CFDA232FF22EB896DCD3ED8A32CCF49896A7281AE3AFED3120372EA7F59E5540F56BD6F813B986F2C1BBE84A698C98C1A98EC2C9ED92D27FDEE09F828721E0FFB6BC628FF152A81FF355C47EF24707EBE60A83DDEB42B73C819300F766B8A168A139578B8FB4C191DA0797D1D94509B3509C3163F4EB6FF32FEA2B8EE7DC8DEF5306CF33F420E332C13B9D1B22646F0708B18383287AD33B5D26DD6F8B776034330542DC4652D09D848F5A4C2C9721D3DD2326DDD0A7FCF9C80724EF96AE65C26E089498010AC6D65A7DA8A6353DB11225A094144D0B572A1BFA28EF1E5D345D612713DEC6F5F8E764F0B4EEBCC2CBF253352D31CBDD814D72E3AF60D251B8BC9193E89BA5C5D4887645C74702D0DA8B7E5217E1FD3A1E32709115A5F666D1CB5717295DEAAFB38CD153FCBA75718EBD3CB2B6DA5E4A4888521F677FA506B9D627D2F2289B838CB8716D3CFCCAAF16903B2F4D1A999528A39ABEF6A8CE2DE66677AFEEEB03B44B707D2086714262F240DF2179D6F18D15E5798E3ED2F2029C52AFA4A2C7C2F963902B9C845797CC4EFB3EA4D52A6BD725F2F1A5AB027FACBEDB7AA78B017546AD18AAE327DF5F8B35F5E0380121E36BE4D72554B95B39BB02BC05FB29A1E77E56A4D366CD61F8A3CB7035EBB2970A0F200E06A634BC1500956937A5AB6F640A9E04BD5BD7FFBDD16FDB47677B91DC7FCE76F4766B2C05887CAC072AE7F9749FC4796096901B7C9F3F248AF6E252F14CE7AF6521B9606161E6D7E464EC74762204689FD0589C0B831D1D30777EB8073585EB742566607E58E9A85B2DA6E8A3EF7EB17A5E1ECB2D688DCFF8C45F77AA5659A3D72637FCB90FFAD5903C14C447E311E940334EF8BE0071A07F4A9B6D49597A6F862AC222005CA27DB5148D6355C62D5A7BDB5361DFD1093EBD6B2D61EBE2790CC006D252F856D68BB34BA0231AFF956E1319C87A02B2A1A4D490FBAB5240BC525E09943037D8033666B212345FB1F6450E1091AAD4B760695377B03613A38EA006E7BE1E5A044190658F7BD334A47D4A6702FDD662655341E506EEF780BAA293FE1F33F450C4B1ABF3D8F7907CCB8761C1E44A11E4065B2C32F76DA08830498F110E8F25F371636AB533BA7FE9D4F160350675D4E600CA469F73979768827ACB307E4F0313CA05DE9F86131E91A1771BAAB9265D4F73E69F8428F2E96A16FD49A1E5FC723461EAA341DE3CA14F0E07153449533CBDD2F9739A5C524B183DBE33FB4F86446A4115ED35395BC568BE5A32E976D78F7D650583545C5D16773365E59E2E6F9721E4A7864843AAC5DE9265C5411CF6D93C16A943A68B081AAE38104F22ED0D36F9C9999DB51E877D539B2DFF4DA981AEAE575930E7ADFF0AC343B84956B77B3AFF346C033BEDC7FDDCF09901D32CB9AC765709D4102A7AD14238FFF09FAF1E140D435CB70A2F92EF8901F00F6B763A1819A84960B650C2DB356F22C685F5251195E7135CAE29E0738963A2B5E808AC06C25039B5F845AD4CE11E4224E4FEC5D3B01955012E54AF2D9F1FCAEC0D4F65966B2DB3A78F814BE864D2318068707671AE1691265F71C023C8191270FD58D82653137B21F29DBEA4EC18B5CA6442EA08594DDF5CFCC578082EFF18218FCD8D87FCE7777040B3EA0540738636F36286CC1DD3A8DA0D6E3409EE803954E8696A113A29163583659F0C7A50D64CB92A1753A1F75A3E122B7A3E29FAE50A32E33011F445F6FAD1C3295BDAEDD2106571471676AFE46D79F7F40349BD6B2AD0E37852D843629F03BDCAC80A6656D64858D58D4EC3A3E6CA8471414B65BD7B892FC83B2092EB41691E50C29001A48FBEDB328E8EF7D0C34A9A9DFAEB53C9C19EC100B474B9B172A5D94523B45C8FD91C9B32E71E65BF0966C94B24866FDDFA833DD4760578720C88991ADB1EAB9BF17D8F2A85D058DD82F63D274B409B426096C0F40FA801B599C60AC9EC3E222852B5EB56BA48892DB01C01B8DF2EBBCED7830E5D3FBCE98C45D8F796E06CF707467731B4C217D64DBFAD5696F6D9E97FAFFC7F9BECB64C20297C232B4DAA91F03314121FFA9F4A6D0A61A427D47246CE9B4FFC8C58FF1EF601C479050ED50E38F070E1535FD190AFEB73F7AF4CE939B3503CD6F9CCAEC6D88AB9B197F447D1AF680990FE9855E75E675BAC07023B052FDDCBCD57B787D493A430859263E182C2C3F2259008CA21FF0F0B058CEB0B2C2C213F688952660C250BD6CF301424F4772E16FA9AD0A7E7E57060D77A75FDE6B195A59D5334E779E032D8CDDAE27AABB0E42382252C37E3F7F3A5FCEB6231E5E2D7715F33D2C86898DA1FAA0F82E633A440A2222A8053CB20FAA63B7D36686410188D66F3F9703149B796008FECB309293BA0356C1EBF9743957D810850B6D2730F3EE6EA93BEF9F8E083581316B8B61398A84DD63953E30F46ED3BCDF3F7C4C9E6E1DC1BEF854C945091C6F607F77F53FE402030B4FAF2A6753D3D0EB1BAD429254CB379EF146CF8F6C603BF7850AA532C6A8BC8285395484457623A6D9B6CD7AC1576E3913FEE2029082F89117B55F783286A8C1B78BD9440100EEE5B0FEAC12B047A1BB30B2703CFC17E11DD0D1CCDDC3FA5C487EF95DCF5D12B644718FF645F22245DE8915154516FBFC90D2F01346B3B151B0E212BFFA458EE8349748C58810A38340DECD635621AD21F010E62BC5D5A117B8C6044DC1CA85624827C02D13765EC50EB7CC5DB503F6881A4C0F4D1830ADA4F073741928F4FC622F0517A85F0CFECCE006CCDE44F4D89A4E2DE9FC2BE20D3FB0CFD188D7156EDD849ED2FBD6C4CCCC72CDA67293229C6073419864F5296EA48AD37C9F29CE694C21E17EF0B593AD0BBE15E312C312F6877CD47345804AB0031FC69A548F823D14CDAC018A7045BD6A9AA077F369FCB218FDCDBF9B1F2364122289CACD72DCB346C02B82C60DD703AE3D893F506416A989FE1552EED99188B6C3317E0C17343196B09BD5FE74EACE3B9C5F28932AA4EDE3C96C3237C0393596DD29A6903A3AD3B96D2DFC7C14D7BC8C7AB4A7A78C91836F92EFD03921D8D59FA8673B011845A1C3AE443613834F21485D90E802D3EA5297B5B28F02F577A1430027D1DB3FB5EBB4064F1407A427CE324934D10F9F8B2D3160C92B5A08C3E65B521772048CFDD9DD0AE9A7590FEB47FFA7E4561531F32DE605F8001DD20007CCF0F094A21648DB362BA67B83CADAE3DDB7571BD50D850D836981AF83C41A2829DA8559B3DF7B9A8698FED3B7DF3AB9AFD71D5E828345EE16507F09588CB0490AB3752950CEB7A96DC2E180BA742C2D125F972C0112E33E4A3B8A64AFDCC50DDD2B54E7796AAFF57C5F49D458BD892CD56C311B5312747298270E57629FCEC8461371FEA0ADCDE386A86A93B98059A38461EBAFC86DC3EF83DE3742E01E201824B21840FDA2F4B7B169F2810C64EE41C33D69C9A38514C49669193FC859C9478E42B9B3A3C5F217D8FBE3875F2185DA03CBF62725C51913095B02F45F2F4817F731DBC61838046CE4AEFD32EA1B59481C3E4CC08EB34EAB75DE9315F4AE1E38558121A8AC9BD91A5A10F012EEEECA6AC10408555C448566897DBCECDD97E704F7E4C321E5E9C0009C3B6C1DC1FAF91B80A3E94E86CBF517091861AABA27FD329C086B69DF9B5A5EC1F13CF3E6322BF80AA2359172A73F7F1893FC1E948E1B99FF863C8AEEA4CD1EFE49DC2AFD25259D33555F9B5C00A282F17A197C0908860F39B240FA02ABE3E5C06C74BB2A9B337C7DB6290577E9A93EB5F2B22ECACD0D3B1F9A0D78C5E793E44F5812D20688FE33DAA6BE7746BA5AABDB229D8FE6C437A0E420EA6B4570BACD24E67F9252D965DB03F2124BED84C40CA19981CB4D9AD6E70D0D20B9595C6DC8D83D44DBC75FE95B95635ADE20B78D2327CCC8A5327AEAEB339BA8DB7A2361FE05ED9C2EEF3E2F8B96B6876E3D6A698601E75A45B79EE540FC6F54CDDB08CE7BD6CFD201EC09C5FFBBACDF23E2FF8EE39E5C4DAC081B8160E9E1F51EBDFBD76D32D67C150FA8D564E56373D7EF32426E75F1616A9DCCAE489FFE958DEBB9AD2A17C7E6A92078764CF8E34F4B26CAA02BADAC5F3F0FA8C524953D22441E2A58A89E76967F4B766BB742696FFB8273E5C8BECAFDE76C0CDF921ED5F258800D4B24601C2EE0E2BEDDF3E696AE49559E87C358D812299499A357005EFA5C99DFF8E0A59399118D35AF052B6C5D91642E025847AD6801667DF37680052DFC111DC95AA4514BB05686F08B7CD44E8EB573DE8E45B6B0FFB709AA673582C01AB9743AA6055268CBD58F0CDDC737070D6BD92FE1C8C900EFB40A1953F7C7A9767B112DCC6FDB3010D6B6A550C3393E493B4AEE993563B3059099394BD24AF7C34213DF5E371AF5BCD5BA7DACACAF53EFCF35852FDDECD708B69164FAC147F70B0DEA2E8BF801C77DC455D7E8636A2E998E39BC1FC4FEC599EDA5E7F2131F829D5DBB69735C40E61A587987D01A6B553D8AAC2078994614D44AB6B4C516EF3D13928C9602DF8146CF5832B123C7EC1909880F8F29FE90486F7862694155422D765F45AC0EEAD8C0E3239D57C8F58A16F0F9FA72B7F12C9D8CDA11305CB22567F3F266D2DD3E72B0377C60209333697F40ED3EABE6D710B7550413113FEED2A23B83445E8E85F12D2E993062B5E215BC1514F6CA7671140D9144ACC844AAE5B113BB55299CBB30E91DA043AEC4B7EFDCE06A5D1C862BFB11A2C92C065E67297C6EA788CCFF5FC775CA27824A8D785736296C4DDF5C86096BF038DEE0C1CC13A32911D39B68327BBB94A16AC4EAF41D619A37B8A827175B23B25072723BD24E07F6BCD9EF0175DEF93714BAA7EDF570F68531669AAF364DACB5892C8336A67CC4CB66A7C81857F67DECE9C39B48CD6B17FF1E4368F462E591EF128529ED0C340C730293DA93190E8B07A33B3629EB1AA62A56C32D469893C89F92E93AD5C7BEC97F1D6F0D0EA6623D666DEDF8B2F786EF72EE465EE9417CFCFF3640B4C59CBF4E4B3E906BC6BF6012FE1F94DB4CB82790AD1F915327F36CC9EF8F26B1A9D820B8D8739688D9D1FF621210C97256E78BB73E2D13B5D4923A68C8F8D64B80E66FCC7795E1F8BB534334C73A7B4F79841ADD309E6B9618B1DF17D4AE047CC67084762F1FC8B3173F6FA2E9BBB48FB8AD01F079A4160E033BABB81660584C4695F08C7E13B97634131C4D04C7BF04DE2AD573CB08539F38E420AB17BE20FAC38C2CDCDC3A6C2BE10FDB861745B03BB8001B364CB553BBFB2558BE9CB23DF774EC9220E4D9A83B1A9121710A2343398967CE22A31484CB3024AAD9C6677102B6FA3B947EEA803D809EB13970F0E5FDDBA2920534BD9ABC739FD77ACD05A9CB3FAB31614D69EAF082632AE154A36289C02DA32DC42F8DF44A14A0C335269ECE06A7515C233043FE51F2E8C36DD2DA8385318B0AF8B8576A3696B028098C3FDAAB3A56F50F7AFB8EFB1EC14D290599205E8FB1B9A338523D915C45F6EF75D3952BE7A09EC1963141B21F2264A479086306446FBF6D97A9E5A1EBDDE0939286BC48A5DCD8535A18C245AE94E74CA7AC82E090647E6C5826DDD1848DDFD757EF419C0C172AC758C4688E9A1804933041275DDC9AFF6E67D15F98631DE48C31CBC30875A104E248B05A1C7D809AA9319666F6DA4159973F1D3DE166A3119950F837C0DB782DE33BA0602582DB079632229D80B0456B3737894482B242AF0DC5F164D52CAF39C91F55C5C9B8DE019A462FB34AF4C93BC38B5368C099B59A711C4DB9B22FB59CEB1500964C90541B721ECA9ECDE88EE04FEE33CEEFB49208A66A6556A83E69152124E1051A715399BBD1A6D3704BB75FDDD19468A3D00711890C1AC5997F29F64579A145DDD7148386971D9150CE10DBC472A5EF1929B6CEB223B68B8F6F50306E608362BADDDB5D1F2DFBBF7E0336CAC6CFFCD32EB11F42C19E4CC0735C322BAA4303C4F4992D0DAFF9A650FE69155103FAF25E70811E5C88C16C92401CB4AE97E42C7F60F3AF6303FFE537BF8AD302D2E2A54CD38F19433326332BF78B8C991AAD690C4EC247419CCA03ADF8191761FCB39EC13B05203569C3BACE68155AF6FD4CC3D0F6756EF5B4D063967F54FC195AC0F7AAE7C8536DDE5EAFF68B46C10CA0B06D642B34898575D736179ECA7B80F1750B76EA6E4E6BC31892BF20CFE87E0B08FD0F1E23A3A609C430C064792F1C90B5EF9B19E60E557059407F041B6E83A59E80934EADA940D7B860F2E48435964B8704E52DC5593E8523CAE9BD4C7CBDA974359B0729FE5DE2BC5FCE2E96B495A5AD41C8E2119E16FE252C76C21474EFAEB4F0454E60723079BEC8063733D4E0F44E5A90EF51FC1DACF111D67355951AB7500EB36612A2A3D6169862DFF97C422D4D54CF1F3C087A1D2C838B1E0C4D944AFD4EC2E8052958EB75E0D434B9C7688DF0D457838C0AE8EB5D26C87F9EDBD599F6CF19A1B299851C6B6B4F44892E336FC1990C54A5D5F56702C9EAED6CEE22C0FBBD92C36345657C4F5C14E3907241B4E773817B267AC5AAEC02E4859EE971A3EF0503A2C9CEFE49291C48E9C0B485D5C89D41773379F6C0ED4E8209BCBBACE416A15CB7683C29FC64C33AA618C79E86AB32722611DEF6941935AC8A317C20F1E6A95E8622CB8EEB1D2D8EA4FF5165B6A83BAC0BB251E588D76CBE52ECD5DEE3B46B2150DE67F61CF993A715AEB99DF995B69D84AB4ED0ED1E984D5319AA80A4536170531997DB792B100A24B11A0B80554B13B4ACA015F9EA986EFA7B4E5794390E459636AC73CB003B04F6DCFD1953E555F5B96A5EDF4F76E6179DE31E2A77709C1A95525560627154A7F858B0C7AFD0E71E08B47AE07E1E208492A576B7C2DFB07F3577F52A366BFEE0A1D054A45F208CDCBD301E99076CC17F0E2799DD24016DC8DFB6CA55643BA15221D9716AC9AF43308DF82FF51F26B47A68A86FF31A3250C5E3A21533A260BFA7FB3357F98037B7D0DD3D9F3F9EA294B3167B9174AE7570E67420796B4203EEF764A5E81D494D34532C37DFC70D3B72B4E4FC7269C4E16991D7CD4882F55258CB88841A31F2A6D236A3E8750B6531AABEE1A4E86886A6CAAEC142DFC154E084BE1E994674F2BDE12296972F2D08C374D3CD0CF64B7CC8D2FCA100E13A2263CF5D8DCD35DD1A0C067A3ED3A3F60B499FF9D109C0A4453F2FCE19923CC1D0C258584B08711D1C26A6F7F289373754EB481A3853B2FF201EEAC86DC8FF3DFCB523CF0E4E9F0BAF7E76904B309294D7445E2F589CA3008021742B779171454EE21E8A6BC2AFAFDB0846F83BACA6D49A1F9ABBFF630AF05F4A03E9A0CFC20AE62FAEFE575D1519EAB8D30CAFB7E6FA0290D22D2DDFB983B6435AA14D977A0964FEBD5E68BD15E9D193D75E27E2B915A8EC4738B5253946ACF7AF408D240793EAF5A36D9D981DDE4C12259A4B6CB0B4D9DC4D2C9D1B2E95630A3648311E07C32FDA520C4DAD2CBC1CCD484F5AB291CFBADDA42D8B5A4D3CCC18639BEDE96B551B32F121D6CFACA1F521DF1DDF649AAB63B3F2E2716EA08C681449A4FF047B9AA2F77CCB5C0A82D6350D290C9E4AD6C157CE8E46F862A330B4F75B2FB0D5AACFFBF42B231702AA066AB9F11105AE03954AF186A21B8947FE2F3F2006697FA51A1E083DD8AEDE97CE8CBF26929580F4C0C3F344EBCAE998D4EC6AE75A05CB4BD21346D951B4798C3F7D947437F656E0B11227011A6CF249773F7EADCB8D78092AAE3DD0B991542861125698737A9BF8E52BCD8AE044F9E92B9883A12A2C4D8DF6802C21B5561DBC1244585470BDBEB2C476B2E663B3A79B2CA8C958676FCE20D6C6D5D818464EDE58D2294D434AD3F893E6EDBC21501E9B3CD2D6E3F36474A8860DD352FA32688F2B9C145B7242938C022FAE108DC9862F8E0300A29A23FDAFB6CC8AA58F9C61D63E67E9DAAA184F5A6152CBF44DB563C755D86DC8096381C1EE5D13D561ACA0EF5049055A2BEBA033348739894812215859B5C81A2C07FDE587D55CD7E369A4E6854FBE7CFAD64BC9809C3377C00B18E18EF4A2EB552908D743FC0B3ED5FC2E9D462096FBEDEF2560936D4A29075FED93345072900FEBF90953B585AE9020C8C55BB971B25AA5080C43150361B7E593C96D33EB3B2C0B51224DAF301D7D7B6944E0CB1B9F712A12A53014CF741CCCC99F26647CCA9E69F8CB5584A4BA3BC07048EEC53E240635B69F1A20F362B6B9A09B8925F1F150D97C5193B9EFCD9122FA72C1ECF6CCB50420E22327861EE7EA5D203ADE2EE436AC55D923DCF4403C9C7FDA623862527F69C94A674482BA737461E57D7C733913A4AB845DE67E66879BE77BAA0053CE80E24BE7C9F66D06BE9378609418183DE4DEC3F07C6D5A7CBF5BEF2E9383F46C7AE1CEDE67714D7E0B65E32A8EEA63782427841B7B21577639BB82013BDADF9AE7A60117340ADD53CD5A9B38DDE76F0CD5ED544234069088AF20A4595D45AF7C4983BCD6C55958E95A8B846A71BB29DC65A0A3B712E7A1CA34197C372E5A8322E93A9FDEE4AB6F95F838A43A010C3DDB4B04B1CEFFCE064D6A0ECD40AD5F709DA9B9896E0C8C312979EF50DDF9DB4726BA267744B128D992625642E04FED944796DD60D3F74DB875D66F0A375AF4E7F4FE86E43E4C14B3C8495C4E0E2F19F82986E339B99B73C830F521317EC3E397C37EE077456822928D4C7F5A3A386B6E459B0D1C85EC15D3E7F411637E300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/MVLBZB+LMRoman10-Regular cguidfix
/F1.1/MVLBZB+LMRoman10-Regular renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0 sc
q
12.23999 12.23999 587.52002 767.52002 rc
/F1.1[ 9.9625998 0 0 9.9625998 0 0]sf
71.640999 710.03699 m
(!"#$%&'%#$#%\(\)#*+)[ 7.194990 5.535221 2.767610 7.247792 3.874455 4.428376 5.258260 7.201964 2.767610 7.247792 2.767610 3.874455 4.981300 2.767610 2.767610 4.428376 0.000000 ] xS
303.509 42.112 m
(,)s
ep
end
%%Trailer
%%Pages: 1
%%BoundingBox: 0 0 612 792
%%EOF

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael Broe | BioDASH</title>
    <link>https://biodash.github.io/authors/michael-broe/</link>
      <atom:link href="https://biodash.github.io/authors/michael-broe/index.xml" rel="self" type="application/rss+xml" />
    <description>Michael Broe</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language>
    <image>
      <url>https://biodash.github.io/authors/michael-broe/avatar_hu13632d739ac05d9f7c100f25ef9127c7_976850_270x270_fill_q90_lanczos_center.jpg</url>
      <title>Michael Broe</title>
      <link>https://biodash.github.io/authors/michael-broe/</link>
    </image>
    
    <item>
      <title>Session 14: Writing your own Functions</title>
      <link>https://biodash.github.io/codeclub/14_functions/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/14_functions/</guid>
      <description>&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;new-to-code-club&#34;&gt;New To Code Club?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, check out the &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions, which also has some pointers that might be helpful if you&amp;rsquo;re new to R or RStudio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please open RStudio before Code Club to test things out &amp;ndash; if you run into issues, join the Zoom call early and we&amp;rsquo;ll troubleshoot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;session-goals&#34;&gt;Session Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn another way to avoid repetition in your code by creating your own functions.&lt;/li&gt;
&lt;li&gt;Learn the basic &lt;strong&gt;template&lt;/strong&gt; of a function in R.&lt;/li&gt;
&lt;li&gt;Learn to incorporate your own functions into &lt;code&gt;for&lt;/code&gt; loops and functionals like &lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lapply()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;map()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Learn all the advantages of using functions instead of copied code blocks.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;We&amp;rsquo;ll be using &lt;code&gt;tibble()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; from the tidyverse packages, so we need to load that first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;http://tidyverse.tidyverse.org&#39;&gt;tidyverse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Attaching packages&lt;/span&gt;&lt;span&gt; ─────────────────────────────────────── tidyverse 1.3.0 ──&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;ggplot2&lt;/span&gt;&lt;span&gt; 3.3.2     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;purrr  &lt;/span&gt;&lt;span&gt; 0.3.4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;tibble &lt;/span&gt;&lt;span&gt; 3.0.4     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr  &lt;/span&gt;&lt;span&gt; 0.8.5&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;tidyr  &lt;/span&gt;&lt;span&gt; 1.0.3     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stringr&lt;/span&gt;&lt;span&gt; 1.4.0&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;readr  &lt;/span&gt;&lt;span&gt; 1.3.1     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;forcats&lt;/span&gt;&lt;span&gt; 0.5.0&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Conflicts&lt;/span&gt;&lt;span&gt; ────────────────────────────────────────── tidyverse_conflicts() ──&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;filter()&lt;/span&gt;&lt;span&gt; masks &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;&lt;span&gt;::filter()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;lag()&lt;/span&gt;&lt;span&gt;    masks &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;&lt;span&gt;::lag()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;why-write-functions&#34;&gt;Why write functions?&lt;/h2&gt;
&lt;h3 id=&#34;copying-your-code-is-not-good&#34;&gt;Copying your code is &lt;em&gt;not good&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;The first motivation for writing a function is when you find yourself cut-and-pasting code blocks with slight alterations each time.&lt;/p&gt;
&lt;p&gt;Say we have the following toy tidyverse data frame, where each column is a vector of 10 random numbers from a normal distribution, with &lt;code&gt;mean = 0&lt;/code&gt; and &lt;code&gt;sd = 1&lt;/code&gt; (the defaults for &lt;code&gt;rnorm&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;tibble&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;
  a &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
  b &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
  c &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
  d &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 10 x 4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;         a      b       c       d&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;     &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt;  0.388  0.736  2.26   -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.302&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt;  1.19  -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.131&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;2.17&lt;/span&gt;&lt;span&gt;   -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.053&lt;/span&gt;&lt;span style=&#39;color: #BB0000;text-decoration: underline;&#39;&gt;7&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt;  0.971  0.919  0.032&lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;9&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.227&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.147&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;1.43&lt;/span&gt;&lt;span&gt;   1.15   -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;2.09&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt;  1.87   0.566 -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.935&lt;/span&gt;&lt;span&gt;   0.601 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;1.07&lt;/span&gt;&lt;span&gt;   0.941  1.56   -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.413&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt;  1.22   0.637  1.62    0.976 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.142&lt;/span&gt;&lt;span&gt;  1.02   1.98    1.22  &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;2.02&lt;/span&gt;&lt;span&gt;   0.499 -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;1.93&lt;/span&gt;&lt;span&gt;   -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.091&lt;/span&gt;&lt;span style=&#39;color: #BB0000;text-decoration: underline;&#39;&gt;7&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt;  0.177  0.347  1.79    1.55&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In previous Code Clubs we&amp;rsquo;ve seen how you can apply a built-in function like &lt;code&gt;median&lt;/code&gt; to each column using a &lt;code&gt;for&lt;/code&gt; loop or &lt;code&gt;lapply&lt;/code&gt;. But say we wanted to do something a bit fancier that is not part of core R. For example, we can &lt;em&gt;normalize&lt;/em&gt; the values in a column so they range from 0 to 1 using the following code block:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.6193844 0.8252053 0.7693140 0.4817556 1.0000000 0.2453463 0.8345409&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [8] 0.4828838 0.0000000 0.5650749&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This code is a literal translation of the mathematical formula for normalization:&lt;/p&gt;
&lt;p&gt;$$z_{i} = \frac{x_{i} - min(x)}{max(x)-min(x)}$$ OK, so how can we do this for each column? Here is a first attempt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;max&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/Extremes.html&#39;&gt;min&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 10 x 4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;        a       b      c     d&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt; 0.619  0.301  1      0.491&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt; 0.825 -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.053&lt;/span&gt;&lt;span style=&#39;color: #BB0000;text-decoration: underline;&#39;&gt;5&lt;/span&gt;&lt;span&gt; 0      0.559&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt; 0.769  0.376  0.497  0.512&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; 0.482 -&lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;0.582&lt;/span&gt;&lt;span&gt;  0.749  0    &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt; 1      0.231  0.278  0.739&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; 0.245  0.384  0.843  0.461&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt; 0.835  0.260  0.855  0.842&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; 0.483  0.418  0.938  0.910&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; 0      0.204  0.053&lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt; 0.549&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt; 0.565  0.142  0.895  1&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This works, but it caused me mental anguish to type it out. Even with cut and paste! All those manual textual substitutions!! And manual data entry is prone to mistakes, especially repetitive tasks like this. And say you had 1,000 columns&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;And it didn&amp;rsquo;t work!!&lt;/strong&gt; Honestly, I swear that mistake was totally real: I didn&amp;rsquo;t notice it until I looked at the output. Can you spot the mistake?&lt;/p&gt;
&lt;p&gt;It turns out R has a &lt;code&gt;range&lt;/code&gt; function that returns the minimum and maximum of a vector, which somewhat simplifies the coding:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The result is a vector something like &lt;a href=&#34;https://rdrr.io/r/base/c.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;c(-1.2129504, 2.1011248)&lt;/code&gt;&lt;/a&gt; (it varies run to run, since the columns values are random) which we can index, and so we only do the min/max computation once for each column, instead of three times, so we get the following block of code for each column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Does this help?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Still pretty horrible, and arguably worse since we add a line for each column.&lt;/p&gt;
&lt;p&gt;How can we distill this into a function to avoid all that repetition?&lt;/p&gt;
&lt;h3 id=&#34;encapsulation-of-code-in-a-function&#34;&gt;Encapsulation of code in a function&lt;/h3&gt;
&lt;p&gt;The secret to function writing is abstracting the &lt;em&gt;constant&lt;/em&gt; from the &lt;em&gt;variable&lt;/em&gt;. (Using the &lt;code&gt;range&lt;/code&gt; function does throw into sharper relief what is constant and what is varying at least.) The constant part is the &lt;strong&gt;body&lt;/strong&gt; of the function: the template or boiler-plate you use over and over again. The variable parts are the &lt;strong&gt;arguments&lt;/strong&gt; of the function. We also need to give the function a &lt;strong&gt;name&lt;/strong&gt;, so we can call it and reuse it. The template for a function is then:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg2...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# do something with arg1, arg2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The arguments go inside &lt;code&gt;(...)&lt;/code&gt;. The body is the block of code you want to reuse, and it&amp;rsquo;s contained in curly brackets &lt;code&gt;{...}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what it looks like in this case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/range.html&#39;&gt;range&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;/&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;rng&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Pretty cool, right? Here &lt;code&gt;normalize&lt;/code&gt; is the descriptive name we give the function.&lt;/p&gt;
&lt;p&gt;We &lt;strong&gt;assign&lt;/strong&gt; the function to the name using &lt;a href=&#34;https://rdrr.io/r/base/assignOps.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;&amp;lt;-&lt;/code&gt;&lt;/a&gt; just like any other value. This means that now &lt;code&gt;normalize&lt;/code&gt; is a function object, just like you create vector objects, or list or data frame objects, when you assigned them to names. Notice too that in RStudio they appear in the Global Environment in a special section, and clicking on them shows the code. This means that if you have a large file of code with many functions defined, you don&amp;rsquo;t have to go back searching for the function definition in the code itself.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;environment_pane.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt; is the &lt;strong&gt;argument&lt;/strong&gt; of the function. In the current case this is a data frame column vector, but we can potentially use this function on &lt;em&gt;any&lt;/em&gt; vector, so let&amp;rsquo;s not be too specific. The more generally you can write your function, the more useful it will be.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;test_vec&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;7&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;pi&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;8.657&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;80&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;test_vec&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 0.000000000 0.051948052 0.001838866 0.073467532 1.000000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;When we &lt;strong&gt;call&lt;/strong&gt; the function, the value we use in the function call is &lt;strong&gt;assigned&lt;/strong&gt; to &lt;code&gt;x&lt;/code&gt; and is &lt;strong&gt;passed in&lt;/strong&gt; to the body of the function. So if we call the function on the first column, it gets passed in to the body, and returns the result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;tibble&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;a &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/Normal.html&#39;&gt;rnorm&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.8726863 1.0000000 0.8764474 0.5618469 0.6111361 0.4147958 0.2889830&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [8] 0.2683500 0.7181709 0.0000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A couple of things to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Including that extra line &lt;code&gt;rng &amp;lt;- range(x)&lt;/code&gt; is no longer a problem, since we just type it once. If you are typing things out over and over you might prefer brevity. &lt;em&gt;When you write a function, you should prefer clarity.&lt;/em&gt; It&amp;rsquo;s good practice to break the the function down into logical steps, and name them properly. It&amp;rsquo;s much easier for others to &amp;lsquo;read&amp;rsquo; your function, and much easier for you when you come back to it in a couple of years. This is the principle of making your code &amp;lsquo;self-annotated&amp;rsquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions should be simple, clear, and do &lt;em&gt;one thing well&lt;/em&gt;. You create programs by combining simple functions in a modular manner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There&amp;rsquo;s something very important but rather subtle about this use of the argument. As noted in &lt;a href=&#34;https://biodash.github.io/codeclub/12_loops/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CodeClub 12&lt;/a&gt;, once a &lt;code&gt;for&lt;/code&gt; loop completes, the variable you&amp;rsquo;re using &lt;em&gt;keeps the value it had&lt;/em&gt; at the last iteration of the loop, which persists in the global environment. Below we&amp;rsquo;ll compare that behavior to what happens with the function&amp;rsquo;s &lt;code&gt;x&lt;/code&gt; argument.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our original horrible code can now be rewritten as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;c&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;d&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Which is an improvement, but the real power comes from the fact that we can use our new function in &lt;code&gt;for&lt;/code&gt; loops and &lt;code&gt;apply&lt;/code&gt; statements. Here is the data from the previous couple of Clubs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;dists_Mar4&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;17&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;93&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;56&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;19&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;175&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;40&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;69&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;267&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;91&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;dists_Mar5&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;87&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;143&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;103&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;223&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;106&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;18&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;87&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;72&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;59&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/data.frame.html&#39;&gt;data.frame&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dists_Mar4&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;dists_Mar5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s first sanity check that our new function behaves sensibly on these vectors:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dists_Mar4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.04942966 0.33840304 0.19771863 0.05703422 0.65019011 0.13688213&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.24714829 1.00000000 0.00000000 0.33079848&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dists_Mar5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; 

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.37614679 0.63302752 0.44954128 1.00000000 0.46330275 0.05963303&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.37614679 0.30733945 0.24770642 0.00000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And while we&amp;rsquo;re here, let&amp;rsquo;s circle back to the assignment of the &lt;code&gt;x&lt;/code&gt; argument outside and inside the function. Below we first assign a value to &lt;code&gt;x&lt;/code&gt; outside the function; pass in a value to &lt;code&gt;x&lt;/code&gt; inside the function; then reevaluate &lt;code&gt;x&lt;/code&gt; outside the function call, to see what happens:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;pi&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.141593&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dists_Mar5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;             &lt;span class=&#39;c&#39;&gt;# inside the function, x &amp;lt;- dists_Mar5&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.37614679 0.63302752 0.44954128 1.00000000 0.46330275 0.05963303&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.37614679 0.30733945 0.24770642 0.00000000&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.141593&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Whatever value &lt;code&gt;x&lt;/code&gt; has outside the function does not affect, and is not affected by, the value of &lt;code&gt;x&lt;/code&gt; inside the function. In computer science terms we say the variable(s) used inside the function are &lt;strong&gt;local&lt;/strong&gt; to the function. They are freshly minted inside it, and safely destroyed before you leave it. So there is no chance of weird or unexpected conflicts with whatever variable values are set outside. In contrast, the variable in the for loop is &lt;strong&gt;global&lt;/strong&gt;. It &amp;lsquo;leaks out&amp;rsquo; from where you actually used it, with perhaps unforeseen consequences. This is extremely important when you start embedding your own functions in larger programs.&lt;/p&gt;
&lt;h3 id=&#34;default-values-for-arguments&#34;&gt;Default values for arguments&lt;/h3&gt;
&lt;p&gt;In R, we can assign a default value for an argument using &lt;a href=&#34;https://rdrr.io/r/base/assignOps.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;=&lt;/code&gt;&lt;/a&gt; assignment. This means the argument will be called automatically, but can be overridden if explicitly called. First we create a function in the usual way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;variable_power&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;p&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;  
  &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;**&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;p&lt;/span&gt;               &lt;span class=&#39;c&#39;&gt;# raises x to the power p&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;variable_power&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And now we create a version with a default value for the power:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;variable_power_2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;p&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;**&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;p&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;variable_power_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;variable_power_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;functions-in-for-loops&#34;&gt;Functions in &lt;code&gt;for&lt;/code&gt; loops&lt;/h3&gt;
&lt;p&gt;Here is how we can use our new function in a &lt;code&gt;for&lt;/code&gt; loop over a data frame. In our previous examples of &lt;code&gt;for&lt;/code&gt; loops &lt;code&gt;median&lt;/code&gt; was a summary statistic and we return a single value for each column, so we created an empty vector of the desired length to hold the values for each column. Here we want to modify the original data frame with the same dimensions and column names. The following code copies the original data frame (so we don&amp;rsquo;t destroy it) and then modifies the copy &amp;lsquo;in place&amp;rsquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;dist_df_norm&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;
&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;column_number&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/nrow.html&#39;&gt;ncol&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;dist_df_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;column_number&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;column_number&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;dist_df_norm&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;    dists_Mar4 dists_Mar5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 1  0.04942966 0.37614679&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 2  0.33840304 0.63302752&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 3  0.19771863 0.44954128&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 4  0.05703422 1.00000000&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 5  0.65019011 0.46330275&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 6  0.13688213 0.05963303&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 7  0.24714829 0.37614679&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 8  1.00000000 0.30733945&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 9  0.00000000 0.24770642&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 10 0.33079848 0.00000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Copying an entire data frame &lt;em&gt;could&lt;/em&gt; take a lot of time. So we can also create an empty data frame (of the same dimensions) and populate it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;empty_vec&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/vector.html&#39;&gt;vector&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;length &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/nrow.html&#39;&gt;nrow&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;dist_df_norm_2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;tibble&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;norm_Mar4 &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;empty_vec&lt;/span&gt;, norm_Mar5 &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;empty_vec&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;kr&#39;&gt;for&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;column_number&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;in&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/nrow.html&#39;&gt;ncol&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nv&#39;&gt;dist_df_norm_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;column_number&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;column_number&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;dist_df_norm_2&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 10 x 2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    norm_Mar4 norm_Mar5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;        &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt;    0.049&lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;4&lt;/span&gt;&lt;span&gt;    0.376 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt;    0.338     0.633 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt;    0.198     0.450 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt;    0.057&lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;0&lt;/span&gt;&lt;span&gt;    1     &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt;    0.650     0.463 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt;    0.137     0.059&lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;6&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt;    0.247     0.376 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt;    1         0.307 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt;    0         0.248 &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt;    0.331     0&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;By writing our own function, we&amp;rsquo;ve effectively extended what R can do. And this is all that packages are: libraries of new functions that extend the capabilities of base R. In fact, if there are functions you design for your particular subject area and find yourself using all the time, you can make your own package and load it, and all your favorite functions will be right there (but that&amp;rsquo;s for another day&amp;hellip;)&lt;/p&gt;
&lt;h2 id=&#34;functional-programming-with-your-own-functions&#34;&gt;Functional programming with your own functions&lt;/h2&gt;
&lt;p&gt;We saw above that you assign the function object to a name, just as you would a vector, list or data frame. In R, functions are &amp;lsquo;first class citizens&amp;rsquo;, which means you can &lt;strong&gt;pass them as arguments to another function&lt;/strong&gt;. This is a very powerful idea, and part of the program of &lt;strong&gt;functional programming&lt;/strong&gt; (we introduced this idea in &lt;a href=&#34;https://biodash.github.io/codeclub/13_apply/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Session 13&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In functional programming, functions are treated as first-class citizens, meaning that they can be bound to names&amp;hellip;, passed as arguments, and returned from other functions, just as any other data type can.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Functions that take other functions as arguments are sometimes referred to as &lt;strong&gt;functionals&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the previous session we showed how to use built-in functions like &lt;code&gt;median&lt;/code&gt; as arguments to functionals. The functions you write yourself can also be used in exactly the same way.&lt;/p&gt;
&lt;h3 id=&#34;lapply&#34;&gt;&lt;code&gt;lapply()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We introduced this functional in &lt;a href=&#34;https://biodash.github.io/codeclub/13_apply/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Session 13&lt;/a&gt;: it always returns a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;lapply_norm&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/lapply.html&#39;&gt;lapply&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;lapply_norm&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; $dists_Mar4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.04942966 0.33840304 0.19771863 0.05703422 0.65019011 0.13688213&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.24714829 1.00000000 0.00000000 0.33079848&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $dists_Mar5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.37614679 0.63302752 0.44954128 1.00000000 0.46330275 0.05963303&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.37614679 0.30733945 0.24770642 0.00000000&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;lapply_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;list&#34;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;lapply_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ dists_Mar4: num [1:10] 0.0494 0.3384 0.1977 0.057 0.6502 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ dists_Mar5: num [1:10] 0.376 0.633 0.45 1 0.463 ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;sapply()&lt;/code&gt;&lt;/a&gt; attempts to simplify the outputs. Here both lists are of type &lt;code&gt;num&lt;/code&gt;, and the same length, so in this case R simplifies to a &lt;strong&gt;matrix&lt;/strong&gt; data structure with a single type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;sapply_norm&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/lapply.html&#39;&gt;sapply&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;sapply_norm&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;       dists_Mar4 dists_Mar5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1,] 0.04942966 0.37614679&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [2,] 0.33840304 0.63302752&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [3,] 0.19771863 0.44954128&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [4,] 0.05703422 1.00000000&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [5,] 0.65019011 0.46330275&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [6,] 0.13688213 0.05963303&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7,] 0.24714829 0.37614679&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [8,] 1.00000000 0.30733945&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [9,] 0.00000000 0.24770642&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [10,] 0.33079848 0.00000000&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;sapply_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;double&#34;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/dim.html&#39;&gt;dim&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;sapply_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 10  2&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;sapply_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  num [1:10, 1:2] 0.0494 0.3384 0.1977 0.057 0.6502 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  - attr(*, &#34;dimnames&#34;)=List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : NULL&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : chr [1:2] &#34;dists_Mar4&#34; &#34;dists_Mar5&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lapply()&lt;/code&gt;&lt;/a&gt; yields a named list, &lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;sapply()&lt;/code&gt;&lt;/a&gt; yields a named matrix.&lt;/p&gt;
&lt;h3 id=&#34;purrrmap&#34;&gt;&lt;code&gt;purrr::map()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The functional &lt;code&gt;map()&lt;/code&gt; from the &lt;strong&gt;purrr&lt;/strong&gt; package behaves the same as &lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lapply()&lt;/code&gt;&lt;/a&gt;, it always returns a list (purrr is automatically loaded as part of the tidyverse):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;map_norm&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;map&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;map_norm&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; $dists_Mar4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.04942966 0.33840304 0.19771863 0.05703422 0.65019011 0.13688213&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.24714829 1.00000000 0.00000000 0.33079848&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $dists_Mar5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 0.37614679 0.63302752 0.44954128 1.00000000 0.46330275 0.05963303&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [7] 0.37614679 0.30733945 0.24770642 0.00000000&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;map_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;list&#34;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;map_norm&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ dists_Mar4: num [1:10] 0.0494 0.3384 0.1977 0.057 0.6502 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ dists_Mar5: num [1:10] 0.376 0.633 0.45 1 0.463 ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice another advantage of both &lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lapply()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;map()&lt;/code&gt;: &lt;em&gt;we don&amp;rsquo;t need to explicitly preallocate any kind of data structure to collect the results&lt;/em&gt;. The allocation is done behind the scenes as part of the implementation of &lt;a href=&#34;https://rdrr.io/r/base/lapply.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lapply()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;map()&lt;/code&gt;, which makes sure they run efficiently. In fact, R implements these functionals as a &lt;code&gt;for&lt;/code&gt; loop behind the scenes, and in &lt;code&gt;map()&lt;/code&gt; that &lt;code&gt;for&lt;/code&gt; loop is implemented in C, so it optimizes performance.&lt;/p&gt;
&lt;p&gt;If we want the output to be a data frame to match the input, we can simply &lt;strong&gt;coerce&lt;/strong&gt; it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;map_norm_df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;map&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;dist_df&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;normalize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nv&#39;&gt;as_tibble&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;map_norm_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; tibble [10 × 2] (S3: tbl_df/tbl/data.frame)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ dists_Mar4: num [1:10] 0.0494 0.3384 0.1977 0.057 0.6502 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ dists_Mar5: num [1:10] 0.376 0.633 0.45 1 0.463 ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;advantages-of-using-functions&#34;&gt;Advantages of using functions&lt;/h3&gt;
&lt;p&gt;Functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;avoid duplication, save time&lt;/li&gt;
&lt;li&gt;avoid coding errors in repetitive code&lt;/li&gt;
&lt;li&gt;localize variables, avoiding unexpected assignment surprises&lt;/li&gt;
&lt;li&gt;let you modify code in a single place, not multiple places&lt;/li&gt;
&lt;li&gt;lets you reuse code, since a single function can often be used on multiple inputs (vectors, lists and data frames), and can be imported from a package, instead of copy and paste.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;breakout-rooms&#34;&gt;Breakout rooms&lt;/h2&gt;
&lt;h3 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;R does not have a built-in function for calculating the &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Coefficient_of_variation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;coefficient of variation&lt;/a&gt;, aka the &lt;strong&gt;RSD&lt;/strong&gt; (relative standard deviation). This is defined as &lt;em&gt;the ratio of the standard deviation to the mean&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Create a function that computes this, and test it on a couple of vectors.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;The relevant R built-ins are &lt;code&gt;sd()&lt;/code&gt; and &lt;code&gt;mean()&lt;/code&gt;. The function should have one argument, which is assumed to be a vector. &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;cv&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;v&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/sd.html&#39;&gt;sd&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;v&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;/&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/mean.html&#39;&gt;mean&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;v&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;cv&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;200&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 0.5759123&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Write a function &lt;code&gt;equalish()&lt;/code&gt; which compares two numbers &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, and checks if they are &amp;lsquo;equal enough&amp;rsquo; according to some threshold &lt;code&gt;epsilon&lt;/code&gt;. Set a &lt;strong&gt;default&lt;/strong&gt; threshold of 0.000001. The function should return TRUE if the absolute value of the difference is inside this threshold.&lt;/p&gt;
&lt;p&gt;Check that it works on a couple of test numbers.&lt;/p&gt;
&lt;p&gt;Now pass in a couple of test vectors. Is this new function vectorized?&lt;/p&gt;
&lt;p&gt;Now call the function explicitly with a different threshold.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;You&#39;ll need to use the absolute value function &lt;code&gt;abs()&lt;/code&gt;, and the logical comparison operator for &#34;less than&#34;. &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;equalish&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;epsilon&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;0.000001&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/MathFun.html&#39;&gt;abs&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;b&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;epsilon&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;equalish&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4.0&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.01&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] FALSE&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;equalish&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4.0&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.000000001&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] TRUE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;v1&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4.000000001&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;v2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4.0&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;7&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;equalish&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;v1&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;v2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1]  TRUE FALSE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;equalish&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;v1&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;v2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;0.000000000000001&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] FALSE FALSE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-3&#34;&gt;Exercise 3&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://en.m.wikipedia.org/wiki/FASTQ_format&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fastq&lt;/a&gt; file format for DNA sequencing uses a letter/punctuation code for the quality of the base called at each position (the fourth line below) which is in one-to-one relationship to the bases in the second line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SIM:1:FCX:1:15:6329:1045 1:N:0:2
TCGCACTCAACGCCCTGCATATGACAAGACAGAATC
+
&amp;lt;&amp;gt;;##=&amp;gt;&amp;lt;9=AAAAAAAAAA9#:&amp;lt;#&amp;lt;;&amp;lt;&amp;lt;&amp;lt;????#=
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To translate a letter code into a numerical &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Phred_quality_score&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;phred quality score&lt;/a&gt; we have to do two things: (i) translate the &lt;strong&gt;character&lt;/strong&gt; to an &lt;strong&gt;integer&lt;/strong&gt; using the &lt;a href=&#34;http://www.asciitable.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ASCII code&lt;/a&gt; look up table (ii) subtract 33 from that value (!).&lt;/p&gt;
&lt;p&gt;For the first step, R has a function that converts a character into an integer according to that table, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/utf8Conversion.html&#39;&gt;utf8ToInt&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;!&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 33&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Write a function &lt;code&gt;phred_score()&lt;/code&gt; that computes the phred score for any character. Check that it returns 0 for &amp;ldquo;!&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Apply your function to our example string&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&amp;gt;;##=&amp;gt;&amp;lt;9=AAAAAAAAAA9#:&amp;lt;#&amp;lt;;&amp;lt;&amp;lt;&amp;lt;????#=&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to convert it to phred quality scores.&lt;/p&gt;
&lt;p&gt;Mini Bonus: Why is &amp;ldquo;33&amp;rdquo; the magic number?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;p&gt;&lt;br&gt;Remember when you pass the value to the function it has to be an R character string.&lt;/p&gt;
&lt;p&gt;Mini Bonus: look at the &lt;strong&gt;position&lt;/strong&gt; of &amp;ldquo;!&amp;rdquo; in the ASCII table linked above and its raw ASCII integer value. &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;phred_score&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;kr&#39;&gt;function&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;character&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;&amp;#123;&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/utf8Conversion.html&#39;&gt;utf8ToInt&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;character&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;33&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;&amp;#125;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;phred_score&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;&amp;lt;&amp;gt;;##=&amp;gt;&amp;lt;9=AAAAAAAAAA9#:&amp;lt;#&amp;lt;;&amp;lt;&amp;lt;&amp;lt;????#=&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 27 29 26  2  2 28 29 27 24 28 32 32 32 32 32 32 32 32 32 32 24  2 25 27  2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [26] 27 26 27 27 27 30 30 30 30  2 28&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&amp;ldquo;!&amp;rdquo; is the first &lt;strong&gt;printing character&lt;/strong&gt; in the ASCII table. The previous characters were used historically to control the behavior of teleprinters: &amp;ldquo;the original ASCII specification included 33 non-printing control codes which originated with Teletype machines; most of these are now obsolete&amp;rdquo;. If the ASCII table started with &amp;ldquo;!&amp;rdquo; we wouldn&amp;rsquo;t need the correction (!). &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
</description>
    </item>
    
    <item>
      <title>Session 9: Subsetting</title>
      <link>https://biodash.github.io/codeclub/09_subsetting/</link>
      <pubDate>Wed, 10 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/09_subsetting/</guid>
      <description>&lt;figure&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;shaker.png&#34; width=&#34;35%&#34;&gt;
&lt;figcaption&gt;
Image from &lt;a href=&#34;https://r4ds.had.co.nz&#34; class=&#34;uri&#34;&gt;https://r4ds.had.co.nz&lt;/a&gt;
&lt;/figcaption&gt;
&lt;/p&gt;
&lt;/figure&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;new-to-code-club&#34;&gt;New To Code Club?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, check out the &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions, which also has some pointers that might be helpful if you&amp;rsquo;re new to R or RStudio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please open RStudio before Code Club to test things out &amp;ndash; if you run into issues, join the Zoom call early and we&amp;rsquo;ll troubleshoot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;session-goals&#34;&gt;Session Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn the uses of R&amp;rsquo;s three basic subsetting operators: &lt;code&gt;[ ]&lt;/code&gt;, &lt;code&gt;[[ ]]&lt;/code&gt;, and &lt;a href=&#34;https://rdrr.io/r/base/Extract.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;$&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Learn how the behavior of these operators varies depending on the &lt;strong&gt;data structure&lt;/strong&gt; you are subsetting (vector, matrix, list, or data frame).&lt;/li&gt;
&lt;li&gt;Prepare to learn how these resemble, and differ from, subsetting operators in Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;intro-what-is-subsetting-anyway&#34;&gt;Intro: What is &amp;lsquo;subsetting&amp;rsquo; anyway?&lt;/h2&gt;
&lt;p&gt;Subsetting (also known as indexing) is simply a formal way of pulling out specific pieces of a data structure. We&amp;rsquo;ve already seen two &lt;strong&gt;dplyr&lt;/strong&gt; verbs that perform this kind of operation for tibbles: &lt;code&gt;filter&lt;/code&gt; (to pull out specific rows) and &lt;code&gt;select&lt;/code&gt; (to pull out specific columns).&lt;/p&gt;
&lt;p&gt;But these are tidyverse commands, and only work with tibbles. R has two more-basic data structures, vectors and lists, and for these we need different subsetting operators. We&amp;rsquo;ll also see that matrices are simply a special kind of vector, that data frames are a special kind of list, and basic subsetting operators also work for these.&lt;/p&gt;
&lt;p&gt;Since the behavior of these operators depends on the actual data structure you are working with, it&amp;rsquo;s useful when experimenting to use them in conjunction with the &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; function, which compactly displays the internal structure of an arbitrary R object. A knowledge of the make-up of these data structures is also important when you come to write your own loops, iterations, and functions.&lt;/p&gt;
&lt;p&gt;The most important distinction between vectors and lists is that vectors are &lt;strong&gt;homogeneous&lt;/strong&gt;, while lists can be &lt;strong&gt;heterogeneous&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;p&gt;&lt;em&gt;Terminological note&lt;/em&gt;: &amp;lsquo;under-the-hood&amp;rsquo; both of these are vectors in the technical sense, and sometimes the distinction is referred to as &lt;strong&gt;atomic vectors&lt;/strong&gt; versus &lt;strong&gt;recursive vectors&lt;/strong&gt;. I&amp;rsquo;ll continue to use just &amp;lsquo;vector&amp;rsquo; and &amp;lsquo;list&amp;rsquo; here. This usage also lines-up with Python.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;vectors&#34;&gt;Vectors&lt;/h2&gt;
&lt;p&gt;A vector is absolutely the most basic data structure in R. Every value in a vector must be of the &lt;strong&gt;same type&lt;/strong&gt;. Strikingly, this sets R apart from Python. Using this kind of vector in Python requires loading a whole separate package: &lt;code&gt;numpy&lt;/code&gt;. The most basic data structure in Python is the list.&lt;/p&gt;
&lt;p&gt;There are four basic types of vector: integer, double, character, and logical. Vectors are created by hand with the &lt;a href=&#34;https://rdrr.io/r/base/c.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;c()&lt;/code&gt;&lt;/a&gt; (combine, concatenate) function. We can check the type with the &lt;a href=&#34;https://rdrr.io/r/base/typeof.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;typeof()&lt;/code&gt;&lt;/a&gt; operator. This is totally redundant if you just created the vector yourself, but when you are debugging code or creating a vector using an expression you might want to check exactly what type of vector is being used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_dbl&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_dbl&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;double&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_int&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1L&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2L&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3L&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4L&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5L&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;integer&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_which&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/seq.html&#39;&gt;seq&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_which&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;integer&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_which2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_which2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;integer&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_log&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;FALSE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;FALSE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_log&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;logical&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;vec_chr&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;b&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;c&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;d&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;e&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_chr&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;character&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;What happens when we perform a basic mathematical operation on a vector?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;vec_int&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1]  2  4  6  8 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(This is &lt;em&gt;completely different&lt;/em&gt; than what you obtain when multiplying a Python list).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;L&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So it&amp;rsquo;s not just that vectors are a basic R data structure, but R is a &lt;strong&gt;vectorised language&lt;/strong&gt;. In many cases applying an operation to a vector automagically applies the operation to every element in the vector. This means that for many basic operations &lt;code&gt;for&lt;/code&gt; loops and mapping functions, necessary in Python, are not needed in R (although if you write your own functions you will need these iteration tools). In Python we could use a &amp;lsquo;list comprehension&amp;rsquo; (a compact and fast version of a &lt;code&gt;for&lt;/code&gt; loop):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# [2, 4, 6, 8, 10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or install the &lt;code&gt;numpy&lt;/code&gt; package that makes vectors and vectorized functions available.&lt;/p&gt;
&lt;p&gt;Vectors have an insanely simple structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;vec_dbl&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  num [1:5] 1 2 3 4 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; also displays the type, and RStudio displays the result of &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; in the Values pane.&lt;/p&gt;
&lt;p&gt;For such a simple structure, there are a surprisingly large number of ways to subset a vector. We&amp;rsquo;ll use the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3.3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5.4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(Notice that the number after the decimal point indicates the position (index) of the element of the vector.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Positive integers&lt;/strong&gt; return elements at the specified positions. Any expression that evaluates to a vector of positive integers can be used as the index. The index operator is &lt;code&gt;[]&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.3&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.3 2.1&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2 3.3 5.4&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/seq.html&#39;&gt;seq&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1 3.3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(In R the indices run from 1 to the length of the object: in Python indices run from 0 to length-1).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Negative integers&lt;/strong&gt; exclude elements at the specified positions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1 4.2 5.4&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2 5.4&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2 5.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Logical vectors&lt;/strong&gt; select elements where the corresponding logical value is TRUE. This is most useful if you can write a &lt;strong&gt;comparison expression&lt;/strong&gt; &lt;code&gt;2 &amp;gt; 3&lt;/code&gt;, &lt;code&gt;4 == 4&lt;/code&gt;, that returns TRUE (or FALSE) for each element of the vector:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;FALSE&lt;/span&gt;, &lt;span class=&#39;kc&#39;&gt;FALSE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1 4.2&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2 3.3 5.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Attributes&lt;/strong&gt;. One of the unusual features of R as opposed to Python is that you can assign metadata of various kinds to the elements of vectors (and lists). For example, we can assign a &lt;strong&gt;name&lt;/strong&gt; to each element, and then use a character vector as the index expression:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;a &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, b &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;4.2&lt;/span&gt;, c &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3.3&lt;/span&gt;, d &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;5.4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  Named num [1:4] 2.1 4.2 3.3 5.4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  - attr(*, &#34;names&#34;)= chr [1:4] &#34;a&#34; &#34;b&#34; &#34;c&#34; &#34;d&#34;&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;d&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;c&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;   d   c   a &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 5.4 3.3 2.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;(Again, Python has no direct equivalent of this, but we can get a similar effect using a &lt;em&gt;dictionary&lt;/em&gt; data structure, which explicitly assigns a name to each value).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nothing&lt;/strong&gt; (&lt;code&gt;[]&lt;/code&gt;) returns the entire vector:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1 4.2 3.3 5.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is not useful for (one dimensional) vectors, but is behind the notation for extracting rows and columns from matrices. Keep in mind a &amp;ldquo;nothing&amp;rdquo; index returns &amp;ldquo;everything&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;matrices&#34;&gt;Matrices&lt;/h2&gt;
&lt;p&gt;A matrix is simply a vector with a &lt;strong&gt;dimensions&lt;/strong&gt; attribute. Here we convert a vector to a two-dimensional matrix, with two rows and three columns, with &lt;a href=&#34;https://rdrr.io/r/base/dim.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;dim(rows, cols)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;z&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3.3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5.4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;8.5&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;1.6&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/dim.html&#39;&gt;dim&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;z&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;      [,1] [,2] [,3]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1,]  2.1  3.3  8.5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [2,]  4.2  5.4  1.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now we can index a specific value using comma notation, where the &lt;em&gt;first&lt;/em&gt; index specifies the row, and the &lt;em&gt;second&lt;/em&gt; index the &lt;em&gt;column&lt;/em&gt; (in Python this is reversed):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;,&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And in two dimensions the &lt;strong&gt;nothing&lt;/strong&gt; after the &lt;code&gt;,&lt;/code&gt; returns &lt;strong&gt;every&lt;/strong&gt; column for that row:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;,&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2 5.4 1.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And here is a way of selecting a submatrix (every row for all columns except the first):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;z&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;,&lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;      [,1] [,2]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1,]  3.3  8.5&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [2,]  5.4  1.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;
&lt;p&gt;There are two main differences between vectors and lists: (i) lists can contain elements of &lt;strong&gt;different types&lt;/strong&gt;; and (ii) lists can contain &lt;strong&gt;other lists&lt;/strong&gt;. This is why lists are sometimes referred to as &lt;strong&gt;recursive vectors&lt;/strong&gt;. We will see examples of these below, but first let&amp;rsquo;s directly compare a &lt;em&gt;list&lt;/em&gt; of numbers to a &lt;em&gt;vector&lt;/em&gt; of numbers, and examine the structure. Lists are constructed with the &lt;a href=&#34;https://rdrr.io/r/base/list.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;list()&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;l&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3.3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5.4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;l&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 5.4&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;l&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 2.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 4.2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 3.3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 5.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here we see the appearance of a new subsetting operator &lt;code&gt;[[ ]]&lt;/code&gt;. What does it yield?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;ll_2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;l&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;ll_2&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;ll_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;double&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now compare this to the result of using the &lt;code&gt;[ ]&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;l_2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;l&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;l_2&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.2&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;l_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;list&#34;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;l_2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 4.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The behavior of the &lt;code&gt;[ ]&lt;/code&gt; operator is very different for lists: it selects the element(s) you request, but &lt;em&gt;it always returns a subsetted version of the original list&lt;/em&gt;. It &amp;lsquo;shrinks&amp;rsquo; the original list. There is nothing like this in Python; it&amp;rsquo;s quite unique to R. (The reason this is the case will become clear when we examine data frames.) The &lt;code&gt;[[ ]]&lt;/code&gt; operator on the other hand just returns the object you select.&lt;/p&gt;
&lt;p&gt;As mentioned above, it&amp;rsquo;s quite possible that an element of a list might itself be a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;m&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2.1&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4.21&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4.22&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3.3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5.4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;m&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 2.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]][[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.21&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]][[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.22&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 5.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This (print) output focuses on content, whereas the &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; function focuses on structure, and is very useful for nested lists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;m&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 2.1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ :List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : num 4.21&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : num 4.22&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 3.3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 5.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Once we combine nested lists and multiple types, things can get pretty hairy. There are various ways to visualize what&amp;rsquo;s going on. Here is one example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x1&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x3&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;lists_structure.png&#34; style=&#34;width:75.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;However the printed form provides us a clue on how to extract an individual element from inside a nested list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# m &amp;lt;- list(2.1, list(4.21, 4.22), 3.3, 5.4)&lt;/span&gt;

&lt;span class=&#39;nv&#39;&gt;m&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.21&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.22&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;m&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4.21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In short, &lt;code&gt;[[ ]]&lt;/code&gt; drills down into a list, while &lt;code&gt;[ ]&lt;/code&gt; returns a diminished version of the original list.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a visualization of various list subsetting operations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;a string&#34;&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;pi&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;a string&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3.141593&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[4]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[4]][[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[4]][[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] -5&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : int [1:3] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : chr &#34;a string&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : num 3.14&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ :List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : num -1&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : num -5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;figure&gt;&lt;img src=&#34;lists_subsetting.png&#34; style=&#34;width:75.0%&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;Subsetting a list, visually.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Here is a recursive pepper shaker, &lt;code&gt;p&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;shaker.png&#34; style=&#34;width:25.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here is the first packet, but still inside the shaker, &lt;code&gt;p[1]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;shaker_first_packet.png&#34; style=&#34;width:25.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here is the first packet by itself, &lt;code&gt;p[[1]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;packet.png&#34; style=&#34;width:25.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And here is the contents of that packet, &lt;code&gt;p[[1]][[1]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pepper.png&#34; style=&#34;width:25.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll play with yet another type of visualization in the exercises.&lt;/p&gt;
&lt;h2 id=&#34;data-frames&#34;&gt;Data frames&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s look at a simple data frame:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/data.frame.html&#39;&gt;data.frame&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;b&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;c&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/typeof.html&#39;&gt;typeof&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;list&#34;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &#39;data.frame&#39;:  3 obs. of  2 variables:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ x: int  1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ y: chr  &#34;a&#34; &#34;b&#34; &#34;c&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So a data frame is basically a list (of columns), with a names attribute for the column names; and with the extra condition that all the columns are of the same length. So we should be able to use our standard list subsetting operators on it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df_col_1&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df_col_1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &#39;data.frame&#39;:  3 obs. of  1 variable:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ x: int  1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Since a data frame is a list, subsetting using &lt;code&gt;[ ]&lt;/code&gt; returns the specified column still inside a data frame. What about &lt;code&gt;[[ ]]&lt;/code&gt;?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;col_1&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;col_1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  int [1:3] 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Using &lt;code&gt;[[ ]]&lt;/code&gt; returns the individual column.&lt;/p&gt;
&lt;p&gt;We can also subset a data frame by name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df_name&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;x&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df_name&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &#39;data.frame&#39;:  3 obs. of  1 variable:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ x: int  1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df_nname&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;x&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df_nname&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  int [1:3] 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Finally &lt;code&gt;df$x&lt;/code&gt; is simply a shorthand for &lt;code&gt;df[[&amp;quot;x&amp;quot;]]&lt;/code&gt; without the &lt;code&gt;[[ ]]&lt;/code&gt; and the &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df_dollar_name&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df_dollar_name&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  int [1:3] 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Just as a matter of interest, in the grand scheme of things lists are just a special kind of vector (a &amp;lsquo;heterogeneous recursive vector&amp;rsquo;), so it should be possible to stick a list column into a data frame. We can, but we have to use the &lt;code&gt;I&lt;/code&gt; &amp;lsquo;identity&amp;rsquo; operator around the list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;df_mixed&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/data.frame.html&#39;&gt;data.frame&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;
  x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, 
  y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/AsIs.html&#39;&gt;I&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;4L&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;7.2&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;string&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;df_mixed&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &#39;data.frame&#39;:  3 obs. of  2 variables:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ x: int  1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ y:List of 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : int 4&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : num 7.2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : chr &#34;string&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..- attr(*, &#34;class&#34;)= chr &#34;AsIs&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&#34;further-reading-and-acknowledgement&#34;&gt;Further reading and acknowledgement&lt;/h4&gt;
&lt;p&gt;For more details on subsetting see &lt;a href=&#34;https://r4ds.had.co.nz/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R for Data Science&lt;/a&gt; and &lt;a href=&#34;https://adv-r.hadley.nz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Advanced R&lt;/a&gt; both by Hadley Wickham, from which much of the material in this module was borrowed.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;A surprisingly useful operator for extracting elements of a numerical vector is the modulo operator &lt;code&gt;x %% y&lt;/code&gt;. This returns the remainder when &lt;code&gt;x&lt;/code&gt; is divided by &lt;code&gt;y&lt;/code&gt;. It is a vectorized operation, so we can apply it to a list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;6&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;7&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;8&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;9&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%%&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] 1 2 0 1 2 0 1 2 0 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Use this operator to extract every third element of the above vector &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt;
&lt;p&gt;&lt;br&gt;Check the example in the presentation about selecting elements when the logical comparison is TRUE. What is the logical test we need to identify every third element? &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solution (click here) &lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;6&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;7&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;8&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;9&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%%&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;==&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 3 6 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Here is a visualization of a list:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;train_total.jpg&#34; style=&#34;width:75.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Create a list in R called &lt;code&gt;train&lt;/code&gt; that captures this structure. Print the list, and also display its structure.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt;
&lt;p&gt;&lt;br&gt;This list has no nested lists, it&amp;rsquo;s just a list of vectors and individual values. &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solution (click here) &lt;/summary&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;6&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;a&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[3]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4 5 6&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : int [1:3] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : chr &#34;a&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : int [1:3] 4 5 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-3&#34;&gt;Exercise 3&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;For each of the following sub-trains/carriages, determine the subsetting expression by eye, and then check that it works by subsetting your &lt;code&gt;train&lt;/code&gt; list from exercise 1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;trains_2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt; &lt;br&gt; There&#39;s more than one way to do these; you will have to use both `[ ]` and `[[ ]]` operators. The last two are tricky, experiment with them... &lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solution (click here) &lt;/summary&gt; &lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;a&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;-&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;2&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 4 5 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[1]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [[2]]&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;train&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;0&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; list()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-4&#34;&gt;Exercise 4&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;A common use of recursive structures in biology is to represent phylogenetic trees. Create a recursive list in R called &lt;code&gt;tree&lt;/code&gt; which captures the following visual representation&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;tree.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt; &lt;br&gt;Start at the top and work down. Start with a simpler subtree, then expand terminals.
&lt;p&gt;Alternatively, start at the bottom with the smallest subtree, then work up, adding sisters into parent nodes.&lt;/p&gt;
&lt;p&gt;In either case, check your working with &lt;a href=&#34;https://rdrr.io/r/utils/str.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; as you incrementally add structure.&lt;/p&gt;
&lt;p&gt;Notice this is a binary branching tree, so the root node of every subtree should contain two elements.&lt;/p&gt;
&lt;p&gt;One of the tricks with these nested lists is to keep track of paired parentheses&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stay calm and recurse.&lt;/strong&gt; &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solution (click here) &lt;/summary&gt; &lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;tree&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;a&#34;&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.html&#39;&gt;list&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;b&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;c&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;d&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;tree&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ : chr &#34;a&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ :List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ :List of 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..$ : chr &#34;b&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   .. ..$ : chr &#34;c&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   ..$ : chr &#34;d&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Session 4: Visualizing Data</title>
      <link>https://biodash.github.io/codeclub/04_ggplot2/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/04_ggplot2/</guid>
      <description>&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;new-to-code-club&#34;&gt;New To Code Club?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, check out the &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions, which also has some pointers that might be helpful if you&amp;rsquo;re new to R or RStudio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please open RStudio before Code Club to test things out &amp;ndash; if you run into issues, join the Zoom call early and we&amp;rsquo;ll troubleshoot.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;session-goals&#34;&gt;Session Goals&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Learn the philosophy of &lt;strong&gt;coding&lt;/strong&gt; a graphic.&lt;/li&gt;
&lt;li&gt;Learn the basic &lt;strong&gt;template&lt;/strong&gt; of a &lt;strong&gt;ggplot2&lt;/strong&gt; graphic, so you can reuse it for multiple chart types.&lt;/li&gt;
&lt;li&gt;Learn how you can quickly add visual information to a graphic using &lt;strong&gt;aesthetics&lt;/strong&gt; and &lt;strong&gt;layers&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;intro-the-ggplot2-philosophy&#34;&gt;Intro: The ggplot2 philosophy&lt;/h2&gt;
&lt;p&gt;We have already seen that in R, instead of manually manipulating data frames as you might do when editing Excel sheets, we &lt;strong&gt;code&lt;/strong&gt; the operations we want to perform using &lt;strong&gt;dplyr&lt;/strong&gt; verbs like &lt;code&gt;select()&lt;/code&gt;, &lt;code&gt;mutate()&lt;/code&gt;, &lt;code&gt;inner_join()&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;In a similar way when performing visualization, instead of clicking on a chart type in Excel, we &lt;strong&gt;code the chart&lt;/strong&gt; in R.&lt;/p&gt;
&lt;p&gt;And just as &lt;strong&gt;dplyr&lt;/strong&gt; gives us efficient ways to manipulate data frames, &lt;strong&gt;ggplot2&lt;/strong&gt; (which is also part of the tidyverse) gives us efficient ways to manipulate charts/plots/graphics (we use these terms interchangeably).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;gg&lt;/strong&gt; in &lt;strong&gt;ggplot2&lt;/strong&gt; stands for &lt;em&gt;grammar of graphics&lt;/em&gt;, a systematic approach for designing statistical plots developed by Leland Wilkinson. The idea behind this was to think about &amp;lsquo;pulling apart&amp;rsquo; various plots into their shared component pieces, then provide code that could put them together again. We can then create new plots like we create new sentences (once we understand this grammar).&lt;/p&gt;
&lt;p&gt;There are two parts to this. First, the &amp;lsquo;nouns and verbs&amp;rsquo; we need to work with plots are very different than those we need to work with data frames. &lt;strong&gt;ggplot2&lt;/strong&gt; is like a mini-language of its own, with its own verbs and syntax.&lt;/p&gt;
&lt;p&gt;Second, this notion of pulling apart a graphic leads to the idea of &lt;em&gt;layers&lt;/em&gt;. You can build up a plot of any complexity by &lt;em&gt;overlaying&lt;/em&gt; different views of the same data.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a learning curve here for sure, but there are a couple of things that help us.&lt;/p&gt;
&lt;p&gt;First, every graphic shares a &lt;em&gt;common template&lt;/em&gt;. This is like thinking about the sentence &amp;ldquo;The cat sat on the mat&amp;rdquo; grammatically as the template &lt;code&gt;NP V PP&lt;/code&gt; (&lt;code&gt;N&lt;/code&gt;oun &lt;code&gt;P&lt;/code&gt;hrase &amp;ldquo;The cat&amp;rdquo;, &lt;code&gt;V&lt;/code&gt;erb &amp;ldquo;sat&amp;rdquo;, &lt;code&gt;P&lt;/code&gt;repositional &lt;code&gt;P&lt;/code&gt;hrase &amp;ldquo;on the mat&amp;rdquo;). Once you understand this structure you can &amp;ldquo;say&amp;rdquo; a &lt;em&gt;lot&lt;/em&gt; of different things.&lt;/p&gt;
&lt;p&gt;(And I mean a &lt;em&gt;lot&lt;/em&gt;. The &lt;a href=&#34;https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ggplot cheat sheet&lt;/a&gt; lists over 40 plot-types, but because this is a language, users can create their own &lt;a href=&#34;https://exts.ggplot2.tidyverse.org/gallery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;extensions&lt;/a&gt; that you can also utilize, adding over 80 more.)&lt;/p&gt;
&lt;p&gt;Second, the way we put layers together is identical to the way we use pipes. You can read &lt;code&gt;%&amp;gt;%&lt;/code&gt; as &amp;ldquo;and then&amp;rdquo;: &lt;code&gt;select()&lt;/code&gt; &lt;em&gt;and then&lt;/em&gt; &lt;code&gt;mutate()&lt;/code&gt; &lt;em&gt;and then&lt;/em&gt; &lt;code&gt;summarize()&lt;/code&gt;. In graphics, we can say &amp;ldquo;show this layer, and then &lt;em&gt;overlay&lt;/em&gt; this layer, and then &lt;em&gt;overlay&lt;/em&gt; this layer&amp;rdquo;, etc., using a very similar syntax.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;So how does this work in practice? We&amp;rsquo;ll work through visualizing the &lt;strong&gt;iris&lt;/strong&gt; dataset that you&amp;rsquo;ve seen before. This is an extremely famous &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Iris_flower_data_set&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dataset&lt;/a&gt; that was first analyzed by R. A. Fisher in 1936: &lt;em&gt;The use of multiple measurements in taxonomic problems&lt;/em&gt;. He was attempting to use petal and sepal measurements to discriminate one species from another.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ggplot2&lt;/strong&gt; is part of the tidyverse package so we need to load that first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# this assumes you&#39;ve already installed tidyverse&lt;/span&gt;
&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;http://tidyverse.tidyverse.org&#39;&gt;tidyverse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Attaching packages&lt;/span&gt;&lt;span&gt; ─────────────────────────────────────── tidyverse 1.3.0 ──&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;ggplot2&lt;/span&gt;&lt;span&gt; 3.3.2     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;purrr  &lt;/span&gt;&lt;span&gt; 0.3.4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;tibble &lt;/span&gt;&lt;span&gt; 3.0.4     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr  &lt;/span&gt;&lt;span&gt; 0.8.5&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;tidyr  &lt;/span&gt;&lt;span&gt; 1.0.3     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stringr&lt;/span&gt;&lt;span&gt; 1.4.0&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;readr  &lt;/span&gt;&lt;span&gt; 1.3.1     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;forcats&lt;/span&gt;&lt;span&gt; 0.5.0&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Conflicts&lt;/span&gt;&lt;span&gt; ────────────────────────────────────────── tidyverse_conflicts() ──&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;filter()&lt;/span&gt;&lt;span&gt; masks &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;&lt;span&gt;::filter()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;lag()&lt;/span&gt;&lt;span&gt;    masks &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;&lt;span&gt;::lag()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And recall that the &lt;strong&gt;iris&lt;/strong&gt; dataset (3 species, 50 observations per species) is automatically available to us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/head.html&#39;&gt;head&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width Species&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 1          5.1         3.5          1.4         0.2  setosa&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 2          4.9         3.0          1.4         0.2  setosa&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 3          4.7         3.2          1.3         0.2  setosa&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 4          4.6         3.1          1.5         0.2  setosa&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 5          5.0         3.6          1.4         0.2  setosa&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 6          5.4         3.9          1.7         0.4  setosa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;What is the correlation between petal length and width in these species? Are longer petals also wider? We can visualize this with a scatterplot. But first let&amp;rsquo;s look a the ggplot template. (Note the package is &lt;strong&gt;ggplot2&lt;/strong&gt;, the command is &lt;code&gt;ggplot&lt;/code&gt;.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ggplot(data = &amp;lt;DATA&amp;gt;) + 
  &amp;lt;GEOM_FUNCTION&amp;gt;(mapping = aes(&amp;lt;MAPPINGS&amp;gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are the obligatory parts of any plot. The first argument to &lt;code&gt;ggplot()&lt;/code&gt; is the data frame:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-3-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This is not very interesting! but it&amp;rsquo;s notable that it is &lt;em&gt;something&lt;/em&gt;. &lt;code&gt;ggplot()&lt;/code&gt; has created a base coordinate system (a base layer) that we can add visual layers to. The &lt;em&gt;add a layer&lt;/em&gt; operator is &amp;ldquo;&lt;strong&gt;+&lt;/strong&gt;&amp;rdquo;, which is the ggplot equivalent of the pipe symbol, and &lt;strong&gt;it must occur at the end of the line&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The next argument specifies the kind plot we want: scatterplot, bar chart, fitted line, boxplot, pie chart, etc. &lt;strong&gt;ggplot2&lt;/strong&gt; refers to these as &lt;strong&gt;geoms&lt;/strong&gt;: the geometrical object that a plot uses to represent data. You can see an overview of many of these geoms in the &lt;a href=&#34;https://github.com/rstudio/cheatsheets/blob/master/data-visualization-2.1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cheat sheet&lt;/a&gt;. The geom for a scatterplot is &lt;code&gt;geom_point()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But we also require a &lt;code&gt;mapping&lt;/code&gt; argument, which maps the &lt;em&gt;variables&lt;/em&gt; in the dataset we want to focus on to their &lt;em&gt;visual representation&lt;/em&gt; in the plot.&lt;/p&gt;
&lt;p&gt;And finally we need to specify an &lt;strong&gt;aesthetic&lt;/strong&gt; for the geometric objects in the plot, which will control things like shape, color, transparency, etc. Perhaps surprisingly, for a scatterplot, the x and y coordinates are aesthetics, since these control, not the shape or color, but the relative position of the points in the coordinate system.&lt;/p&gt;
&lt;p&gt;Here is our complete plot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-4-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There is clearly a positive correlation between length and width. And we can make this even more apparent by visually fitting a line to the data, by &lt;em&gt;overlaying&lt;/em&gt; another geom in the same plot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_smooth&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-5-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There is clearly some code redundancy here, and we really don&amp;rsquo;t want the x, y mapping of these two layers to be independent. We can extract the common mapping information and move it to the top level:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;, &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mapping&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_smooth&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-6-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;So we have the possibility of &lt;em&gt;local&lt;/em&gt; layer specifications, and &lt;em&gt;global&lt;/em&gt; specifications. Global specifications are &lt;em&gt;inherited&lt;/em&gt; by all the local layers.&lt;/p&gt;
&lt;h3 id=&#34;the-power-of-aesthetics&#34;&gt;The power of aesthetics&lt;/h3&gt;
&lt;p&gt;The aim of Fisher&amp;rsquo;s paper was to try to discriminate different species based on their morphological measurements. It looks from this plot that there are two distinct clusters. Do these clusters correspond to different species? There are two clusters, but three species. How can we explore this further?&lt;/p&gt;
&lt;p&gt;Our current plot uses two numeric variables: &lt;code&gt;Petal.Length&lt;/code&gt; and &lt;code&gt;Petal.width&lt;/code&gt;. We can add a third categorical variable, like &lt;code&gt;Species&lt;/code&gt;, to a two dimensional scatterplot by mapping it to a different visual aesthetic. We&amp;rsquo;ve mapped length and width to x,y coordinates. Now we&amp;rsquo;ll simultaneously map species to &lt;code&gt;color&lt;/code&gt; by expanding our list of aesthetics:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mapping&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Petal.Width&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-7-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The R help for a specific geoms will list, among other things, all the aesthetics that geom supports.&lt;/p&gt;
&lt;h2 id=&#34;breakout-rooms&#34;&gt;Breakout Rooms&lt;/h2&gt;
&lt;p&gt;In the exercises we&amp;rsquo;ll be looking a little more at the &lt;strong&gt;iris&lt;/strong&gt; data, and in addition, the NHANES data we used last week, and the left-joined bird dataset we built last week in &lt;strong&gt;Excercise 7&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t installed the NHANES dataset do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/install.packages.html&#39;&gt;install.packages&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;NHANES&#34;&lt;/span&gt;, repos &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;http://cran.us.r-project.org&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; The downloaded binary packages are in&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   /var/folders/d4/h4yjqs1560zbsgvrrwbmbp5r0000gn/T//RtmpPvm8W9/downloaded_packages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Once installed, load it with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;NHANES&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A prebuilt joined data set has been loaded on github.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# create a data directory for the new file if you haven&#39;t done so yet:&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/files2.html&#39;&gt;dir.create&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#39;data/birds&#39;&lt;/span&gt;, recursive &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning in dir.create(&#34;data/birds&#34;, recursive = TRUE): &#39;data/birds&#39; already exists&lt;/span&gt;


&lt;span class=&#39;c&#39;&gt;# set the url&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;joined_data_url&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#39;https://raw.githubusercontent.com/biodash/biodash.github.io/master/content/codeclub/04_ggplot2/joined_data.tsv&#39;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# set the path for the downloaded file&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;joined_file&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#39;data/birds/joined_data.tsv&#39;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#download to file&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/download.file.html&#39;&gt;download.file&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;url &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;joined_data_url&lt;/span&gt;, destfile &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;joined_file&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# read file&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;read_tsv&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;joined_file&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Parsed with column specification:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; cols(&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   species = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   locality = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   stateProvince = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   eventDate = &lt;span style=&#39;color: #0000BB;&#39;&gt;col_datetime(format = &#34;&#34;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   species_en = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   adult_body_mass_g = &lt;span style=&#39;color: #00BB00;&#39;&gt;col_double()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   adult_svl_cm = &lt;span style=&#39;color: #00BB00;&#39;&gt;col_double()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   longevity_y = &lt;span style=&#39;color: #00BB00;&#39;&gt;col_double()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   litter_or_clutch_size_n = &lt;span style=&#39;color: #00BB00;&#39;&gt;col_double()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Revisit the &lt;strong&gt;iris&lt;/strong&gt; data set, and plot sepal width (y) against sepal length (x) colored by species. Which morphological character, petals or sepals, provides the greatest discrimination between species?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;Simply reuse the code we used for petals. You can often leverage code from an old plot for a new one. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mapping&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Sepal.Length&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Sepal.Width&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-11-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note this solution shows yet another way to position global mapping information: as its own layer. This can help readability and avoid too many nested parentheses.&lt;/p&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Use the NHANES data set to plot body mass index (y) against height (x). Color by gender. Which gender has the highest BMI?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;&lt;code&gt;glimpse()&lt;/code&gt; the dataset to identify the variable names. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;NHANES&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Height&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;BMI&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Gender&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning: Removed 366 rows containing missing values (geom_point).&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-12-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-3&#34;&gt;Exercise 3&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Use the same plot but now color by physical activity. How active are those people with the highest BMI?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;Again, &lt;code&gt;glimpse()&lt;/code&gt; the dataset to identify the variable names. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;NHANES&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Height&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;BMI&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;PhysActive&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning: Removed 366 rows containing missing values (geom_point).&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-13-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2 id=&#34;exercise-4&#34;&gt;Exercise 4&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Often plotting the data allows us to identify outliers, which may be data-entry errors, or genuinely extreme data. Using the &lt;code&gt;joined_data&lt;/code&gt; set, plot adult body mass (y) against longevity (x). Identify extreme data points at the high end of body mass. How can we identify what these points represent?&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt; Examine the plot to find an appropriate threshold value, and filter the data using that value. How many data points are there passing that threshold? What species are represented by these data points? How many weights are reported? Why is the plot misleading here? &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;mapping &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;longevity_y&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning: Removed 24089 rows containing missing values (geom_point).&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-14-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;10000&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 228 x 9&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    species locality stateProvince eventDate           species_en&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;   &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;    &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;         &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dttm&amp;gt;&lt;/span&gt;&lt;span&gt;              &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt; Cygnus… Findlay  Ohio          2008-02-17 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt; Cygnus… Dundee   Ohio          2004-02-16 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt; Cygnus… 44805 A… Ohio          2006-02-18 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt; Cygnus… 45011 H… Ohio          2005-02-19 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt; Cygnus… 45042 M… Ohio          2009-02-13 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Trumpeter…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt; Cygnus… 44813 B… Ohio          2007-02-19 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt; Cygnus… Spencer  Ohio          2008-02-16 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt; Cygnus… 44903 M… Ohio          2009-02-16 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt; Cygnus… 44601 A… Ohio          2002-02-16 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt; Cygnus… Avon La… Ohio          2007-02-17 &lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;00:00:00&lt;/span&gt;&lt;span&gt; Mute Swan &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 218 more rows, and 4 more variables: adult_body_mass_g &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;#   adult_svl_cm &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;, longevity_y &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span style=&#39;color: #555555;&#39;&gt;, litter_or_clutch_size_n &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;10000&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;select&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;distinct&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 2 x 1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   species          &lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt;            &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;1&lt;/span&gt;&lt;span&gt; Cygnus olor      &lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;2&lt;/span&gt;&lt;span&gt; Cygnus buccinator&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;joined_data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/stats/filter.html&#39;&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;10000&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;select&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;adult_body_mass_g&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt; 
  &lt;span class=&#39;nf&#39;&gt;distinct&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 2 x 1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   adult_body_mass_g&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;               &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;1&lt;/span&gt;&lt;span&gt;             &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;&lt;span&gt;230&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;2&lt;/span&gt;&lt;span&gt;             &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;10&lt;/span&gt;&lt;span&gt;300&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;h2 id=&#34;bonus-a-new-geom&#34;&gt;Bonus, a new geom!&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;p&gt;Revisit the &lt;strong&gt;iris&lt;/strong&gt; data and generate a density histogram for sepal length, categorized by species.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;
Hints (click here)
&lt;/summary&gt;
&lt;br&gt;Use &lt;code&gt;geom_density()&lt;/code&gt;. Check the help to see what aesthetics it supports. Note that while you &#39;color&#39; a point, you &#39;fill&#39; an area. &lt;br&gt; &lt;br&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;
Solution (click here)
&lt;/summary&gt;
&lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;data &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;iris&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mapping&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Sepal.Length&lt;/span&gt;, fill &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_density&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;alpha &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;0.5&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-18-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Note, what does the &lt;strong&gt;alpha&lt;/strong&gt; aesthetic control? &lt;br&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to Code Club</title>
      <link>https://biodash.github.io/codeclub/00_welcome-to-codeclub/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/00_welcome-to-codeclub/</guid>
      <description>&lt;hr&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Welcome to OSU Code Club! Materials for each episode will be provided in posts like this one,
collected in the &lt;a href=&#34;https://biodash.github.io/codeclub/&#34;&gt;Code Club Sessions page&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For more information about OSU Code Club, and a form to sign up,
see the &lt;a href=&#34;https://biodash.github.io/codeclub-about/&#34;&gt;About Code Club page&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For info on upcoming sessions, see &lt;a href=&#34;https://biodash.github.io/codeclub-schedule/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can code locally or in your browser, see our &lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;page with computer setup instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are completely new to R, see our &lt;a href=&#34;https://biodash.github.io/codeclub-novice/&#34;&gt;page with resources and tips&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also &lt;a href=&#34;https://biodash.github.io/codeclub-suggest/&#34;&gt;suggest a topic to be covered at Code Club&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt; &lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

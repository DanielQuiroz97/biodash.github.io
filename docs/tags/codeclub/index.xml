<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>codeclub | BioDASH</title>
    <link>https://biodash.github.io/tags/codeclub/</link>
      <atom:link href="https://biodash.github.io/tags/codeclub/index.xml" rel="self" type="application/rss+xml" />
    <description>codeclub</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 24 Jan 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://biodash.github.io/images/logo_hu6407506e646a281542ecb299640680ce_37988_300x300_fit_lanczos_2.png</url>
      <title>codeclub</title>
      <link>https://biodash.github.io/tags/codeclub/</link>
    </image>
    
    <item>
      <title>Session 7: R Markdown</title>
      <link>https://biodash.github.io/codeclub/07_rmarkdown/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/07_rmarkdown/</guid>
      <description>&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;R Markdown consists of an amazing ecosystem of R packages to produce many types of technical content. Its signature capability is that is can &lt;strong&gt;run R code and print the code along with its results and nicely formatted prose.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To understand R Markdown, we need to learn about three new things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Markdown&lt;/strong&gt;, a very lightweight text formatting language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code chunks&lt;/strong&gt;, which allow us to incorporate R code that can be executed and whose results we can display in text, figures, and tables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The YAML header&lt;/strong&gt;, which encodes metadata about the output, such as the desired output format and specific formatting features.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We&amp;rsquo;ll focus on HTML page output, but will glimpse at the &lt;strong&gt;many possibilities for the output format&lt;/strong&gt;: with R Markdown, it is possible to create not just technical reports, but also slide decks, websites, books, scientific articles, and so on.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;setup&#34;&gt;Setup&lt;/h4&gt;
&lt;p&gt;At the core of the R Markdown ecosystem is the &lt;em&gt;rmarkdown&lt;/em&gt; package. We need to install this but don&amp;rsquo;t need to load it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/install.packages.html&#39;&gt;install.packages&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;rmarkdown&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Inside your directory for Code Club, create a directory for this week:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/files2.html&#39;&gt;dir.create&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#39;S07&#39;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h4 id=&#34;first-an-example&#34;&gt;First, an example&lt;/h4&gt;
&lt;p&gt;Before we go into details, let&amp;rsquo;s first see a quick demonstration of what we are talking about:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Go to &lt;code&gt;File&lt;/code&gt; =&amp;gt; &lt;code&gt;New File&lt;/code&gt; =&amp;gt; &lt;code&gt;R Markdown&lt;/code&gt;, change the &lt;em&gt;Title&lt;/em&gt; to &amp;ldquo;Markdown demo&amp;rdquo;, and click &lt;code&gt;OK&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Take a look at the R Markdown document, and notice that there seems to be some sort of header (=&amp;gt; &lt;em&gt;&lt;strong&gt;YAML&lt;/strong&gt;&lt;/em&gt;), followed by R code wrapped in strange constructs with backticks (=&amp;gt; &lt;em&gt;&lt;strong&gt;Code chunks&lt;/strong&gt;&lt;/em&gt;), and plain written text (=&amp;gt; &lt;em&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/em&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Before we can create output, we need to save the document. Click the &lt;code&gt;Save&lt;/code&gt; button and save the files as &lt;code&gt;demo.Rmd&lt;/code&gt; inside your newly created directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now click the &lt;strong&gt;Knit button&lt;/strong&gt; in one of the top bars, and a document should show up in a pop-up or the Viewer pane. This is the &lt;em&gt;rendered output&lt;/em&gt; from the R Markdown document.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice that the YAML header is not printed, at least not verbatim, while some of the code is printed, and we also see code output including a plot!&lt;/p&gt;
&lt;p&gt;This is what the raw and rendered output look side-by-side:&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=img/rmd-demo-both.png width=&#34;1000px&#34;&gt;
&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll now talk about Markdown, code chunks, and the YAML header in turn.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;i-markdown&#34;&gt;I: Markdown&lt;/h2&gt;
&lt;p&gt;Markdown is a very lightweight language to format plain text files, which evolved from simple in-line formatting applied in emails before those started using HTML.&lt;/p&gt;
&lt;p&gt;Need to emphasize a word without being able to make it italic or bold? How about adding emphasis with asterisks *like so*?&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;an-overview-of-commonly-used-markdown-syntax&#34;&gt;An overview of commonly used Markdown syntax&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Syntax&lt;/th&gt;
&lt;th&gt;Result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;# My Title&lt;/td&gt;
&lt;td&gt;Header level 1 (largest)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;## My Section&lt;/td&gt;
&lt;td&gt;Header level 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;### My Subsection&lt;/td&gt;
&lt;td&gt;Header level 3 &amp;ndash; and so forth&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*italic* or _italic_&lt;/td&gt;
&lt;td&gt;&lt;em&gt;italic&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;**bold** or __bold__&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[Markdown Guide](markdownguide.org)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;a href=&#34;https://markdownguide.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Markdown Guide&lt;/a&gt; (Link with custom text)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;![](path/to/figure.png)&lt;/td&gt;
&lt;td&gt;Figure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- List item&lt;/td&gt;
&lt;td&gt;Unordered (bulleted) list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1. List item&lt;/td&gt;
&lt;td&gt;Ordered (numbered) list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;`inline code`&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;inline code&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;```&lt;/code&gt; or 4 leading spaces&lt;/td&gt;
&lt;td&gt;Start/end of generic code block (for formatting only)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;```r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Start of &lt;code&gt;r&lt;/code&gt; code block (end with &lt;code&gt;```&lt;/code&gt;) (for formatting only)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;---&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Horizontal rule (line)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To see this formatting in action, see below an example of a raw Markdown file on the left, and its &lt;em&gt;rendered&lt;/em&gt; (formatted) output on the right:&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=img/md-demo.png width=&#34;1000px&#34;&gt;
&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;p&gt;&amp;ldquo;Plain&amp;rdquo; Markdown files have the extension &lt;code&gt;.md&lt;/code&gt;, whereas R Markdown files have the extension &lt;code&gt;.Rmd&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;ii-integrating-r-code&#34;&gt;II: Integrating R code&lt;/h2&gt;
&lt;p&gt;As we saw above, plain Markdown has syntax for code &lt;em&gt;formatting&lt;/em&gt;, but the code is not actually being executed. &lt;strong&gt;In R Markdown, however, we are able run code!&lt;/strong&gt; The syntax to do so is only slightly modified from what we saw above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For &lt;strong&gt;inline code&lt;/strong&gt;, we add &lt;code&gt;r&lt;/code&gt; and a space before the R code that is to be executed, for example:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Raw&lt;/th&gt;
&lt;th&gt;Rendered&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;There are &lt;code&gt;`r 365*24`&lt;/code&gt; hours in a year&lt;/td&gt;
&lt;td&gt;There are 8760 hours in a year&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To generate &lt;em&gt;code blocks&lt;/em&gt;, which we call &lt;strong&gt;code chunks&lt;/strong&gt; in an R Markdown context:&lt;br&gt;
following the three backticks, we add r &lt;em&gt;inside curly braces&lt;/em&gt; (&lt;code&gt;{r}&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We can optionally add settings that we want to apply to that chunk and/or chunk labels:&lt;br&gt;
&lt;code&gt;{r, option1=value, ...}&lt;/code&gt; or &lt;code&gt;{r unique-chunk-label, option1=value, ...}&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;p&gt;RStudio keyboard shortcut to insert a code chunk: &lt;kbd&gt;Cmd/Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;I&lt;/kbd&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id=&#34;code-chunk-examples&#34;&gt;Code chunk examples&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A code chunk with &lt;strong&gt;default options&lt;/strong&gt;&amp;hellip;&lt;/p&gt;
&lt;p align=&#34;left&#34;&gt;
&lt;img src=img/example-chunk-1.png width=&#34;100%&#34;&gt;
&lt;/p&gt;
&lt;p&gt;&amp;hellip;will be executed and shown followed by the output of the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/mean.html&#39;&gt;mean&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;$&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;bill_depth_mm&lt;/span&gt;, na.rm &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 17.15117&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As an example of using a &lt;strong&gt;code chunk option&lt;/strong&gt;, we will disable printing the code using &lt;code&gt;echo=FALSE&lt;/code&gt; (the code will still run and the output will still be shown):&lt;/p&gt;
&lt;p align=&#34;left&#34;&gt;
&lt;img src=img/example-chunk-2.png width=&#34;100%&#34;&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 17.15117&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Figures&lt;/strong&gt; can, of course, also be printed:&lt;/p&gt;
&lt;p align=&#34;left&#34;&gt;
&lt;img src=img/example-chunk-3.png width=&#34;100%&#34;&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;penguins&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_length_mm&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;bill_depth_mm&lt;/span&gt;, color &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;species&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;theme_bw&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning: Removed 2 rows containing missing values (geom_point).&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-6-1.png&#34; alt=&#34;Fig. 1: Bill length and depth are correlated within species, &amp;lt;br&amp;gt; and differ subtly between species.&#34; width=&#34;700px&#34; /&gt;&lt;/p&gt;
&lt;p class=&#34;caption&#34;&gt;
Fig. 1: Bill length and depth are correlated within species, &lt;br&gt; and differ subtly between species.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Above, we added a &lt;strong&gt;caption&lt;/strong&gt; for the figure using the &lt;code&gt;fig.cap&lt;/code&gt; argument (with a little trick to force a line break, using the &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; HTML syntax).&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;h4 id=&#34;code-chunk-options&#34;&gt;Code chunk options&lt;/h4&gt;
&lt;p&gt;Here is an overview of some the most commonly made &lt;em&gt;changes to defaults&lt;/em&gt; for code chunk options. This quickly gets confusing, but you&amp;rsquo;ll get the hang of it after experimenting a bit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;echo=FALSE&lt;/code&gt; &amp;ndash; Don&amp;rsquo;t print the code in the output file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval=FALSE&lt;/code&gt; &amp;ndash; Don&amp;rsquo;t run (&lt;strong&gt;eval&lt;/strong&gt;uate) the code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include=FALSE&lt;/code&gt; &amp;ndash; Run but don&amp;rsquo;t print the code, nor any of its results.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;results=&amp;quot;hide&amp;quot;&lt;/code&gt; &amp;ndash; Don&amp;rsquo;t print the &lt;em&gt;text output&lt;/em&gt; of the code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.show=&amp;quot;hide&amp;quot;&lt;/code&gt; &amp;ndash; Don&amp;rsquo;t print &lt;em&gt;figures&lt;/em&gt; produced by the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, you can use &lt;code&gt;message=FALSE&lt;/code&gt; and &lt;code&gt;warning=FALSE&lt;/code&gt; to suppress any &lt;em&gt;messages&lt;/em&gt; (like the output when loading packages) and &lt;em&gt;warnings&lt;/em&gt; (like the warning for the penguin figure above), respectively, that R might produce.&lt;/p&gt;
&lt;p&gt;For figures, the following options are especially useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fig.cap=&amp;quot;My caption&amp;quot;&lt;/code&gt; &amp;ndash; Include a caption.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.asp=0.6&lt;/code&gt; &amp;ndash; Aspect ratio.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.width=6&lt;/code&gt; &amp;ndash; Width of in inches: same as sizing in regular R code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig.height=9.6&lt;/code&gt; &amp;ndash; Height in inches: same as sizing in regular R code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;out.width=&amp;quot;70%&amp;quot;&lt;/code&gt; &amp;ndash; Width at which the figure is &lt;em&gt;printed in the document&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, if your document takes a long time to knit, use &lt;code&gt;cache=TRUE&lt;/code&gt; to enable caching of results.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;h4 id=&#34;default-chunk-options&#34;&gt;Default chunk options&lt;/h4&gt;
&lt;p&gt;It is often practical to set default chunk options for the entire document, and you can do so with the &lt;code&gt;opts_chunk$set()&lt;/code&gt; function as shown below:&lt;/p&gt;
&lt;p align=&#34;left&#34;&gt;
&lt;img src=img/global-chunk.png width=&#34;100%&#34;&gt;
&lt;/p&gt;
&lt;p&gt;This is usually done in separate &lt;em&gt;&amp;ldquo;global setup chunk&amp;rdquo;&lt;/em&gt; at the start of the document.&lt;br&gt;
Whenever necessary, you can then override these defaults for specific chunks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;iii-the-yaml-header&#34;&gt;III: The YAML header&lt;/h2&gt;
&lt;p&gt;YAML (&lt;em&gt;&amp;ldquo;YAML Ain&amp;rsquo;t Markup Language&amp;rdquo;&lt;/em&gt;) is a simple format commonly used for &lt;em&gt;configuration files&lt;/em&gt;, which allows you to provide key-value pairs such as &lt;code&gt;author: John Doe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In R Markdown files, it is used as a &lt;strong&gt;header&lt;/strong&gt; which configures certain aspects of the output, especially the formatting. Put another way, the YAML header &lt;em&gt;contains the metadata&lt;/em&gt; for the output.&lt;/p&gt;
&lt;h4 id=&#34;a-basic-yaml-header&#34;&gt;A basic YAML header&lt;/h4&gt;
&lt;p&gt;Here is an example of a very basic YAML header:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
author: My name
title: The document&#39;s title
output: html_document
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the lines which just contain &lt;strong&gt;three dashes&lt;/strong&gt;, which mark the beginning and the end of the YAML header.&lt;/p&gt;
&lt;h4 id=&#34;adding-options&#34;&gt;Adding options&lt;/h4&gt;
&lt;p&gt;Often, a value (like &lt;code&gt;html_document&lt;/code&gt;) can itself be given key-value pairs to specify additional options &amp;ndash; see the example below where we include a Table of Contents (&lt;code&gt;toc&lt;/code&gt;) and also set it to &amp;ldquo;float&amp;rdquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
output:
  html_document:
    toc: true
    toc_float: true
---
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Note the syntax changes (newlines and added indentation) between the above two examples, this is perhaps a little awkward and often leads to mistakes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Indentation in YAML is using two or four spaces (no tabs!) per indentation level, and it is &lt;em&gt;sensitive to indentation errors&lt;/em&gt;. (Fortunately, RStudio inserts spaces for tabs by default &amp;ndash; check/set in &lt;code&gt;Tools&lt;/code&gt; =&amp;gt; &lt;code&gt;Global Options&lt;/code&gt; =&amp;gt; &lt;code&gt;Code&lt;/code&gt; =&amp;gt; &lt;code&gt;Editing&lt;/code&gt;.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;h4 id=&#34;some-options-for-html_document-output&#34;&gt;Some options for &lt;code&gt;html_document&lt;/code&gt; output&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;html_document&lt;/code&gt; is the most commonly used output format for R Markdown documents, and here are few particularly useful options to customize the output:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;code_download: true&lt;/code&gt; &amp;ndash; Include a button to download the code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code_folding: hide&lt;/code&gt; &amp;ndash; Using &lt;code&gt;hide&lt;/code&gt; or &lt;code&gt;show&lt;/code&gt; will enable the folding of code chunks, with &lt;code&gt;hide&lt;/code&gt; hiding them by default.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toc: true&lt;/code&gt; &amp;ndash; Include a table of contents (Also: &lt;code&gt;toc_depth: 3&lt;/code&gt; sets depth to 3, &lt;code&gt;toc_float: true&lt;/code&gt; lets the TOC &amp;ldquo;float&amp;rdquo; as you scroll down the document).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;number_sections: true&lt;/code&gt; &amp;ndash; Number the section headings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df_print: paged&lt;/code&gt; &amp;ndash; Get nicely formatted and paged data frame printing (also try: &lt;code&gt;df_print: kable&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theme: cerulean&lt;/code&gt; &amp;ndash; Use a pre-built theme, controlling the overall look and feel of the document. See 
&lt;a href=&#34;https://www.datadreaming.org/post/r-markdown-theme-gallery/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt; for a visual overview.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=img/rmd-3themes.png width=&#34;100%&#34;&gt;
&lt;figcaption&gt;
Three HTML document &lt;code&gt;theme&lt;/code&gt; options: &lt;code&gt;darkly&lt;/code&gt;, &lt;code&gt;flatly&lt;/code&gt;, and &lt;code&gt;cerulean&lt;/code&gt;.
&lt;/figcaption&gt;
&lt;/p&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;iv-r-markdown-and-rstudio&#34;&gt;IV: R Markdown and RStudio&lt;/h2&gt;
&lt;p&gt;The RMarkdown ecosystem of packages is being developed by RStudio, so it should come as no surprise that the RStudio IDE has some nice RMarkdown functionality.&lt;/p&gt;
&lt;h4 id=&#34;knitting-and-previewing-your-document&#34;&gt;Knitting and previewing your document&lt;/h4&gt;
&lt;p&gt;The process of rendering an R Markdown file into another format, as specified by the YAML header, is called &lt;strong&gt;knitting&lt;/strong&gt;. We already saw the button to knit the current document (keyboard shortcut: &lt;kbd&gt;Cmd/Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;K&lt;/kbd&gt;).&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;p&gt;If you get preview pop-up windows in RStudio, click the cog wheel icon next to the Knit button, and then select &amp;ldquo;&lt;em&gt;Preview in Viewer Pane&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;Instead of knitting the entire document, you can also &lt;strong&gt;run individual code chunks&lt;/strong&gt; using the green &amp;ldquo;play button&amp;rdquo; (or &lt;kbd&gt;Cmd/Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;Enter&lt;/kbd&gt;), or all code chunks up until the current one (button to the left of the play button).&lt;/p&gt;
&lt;p&gt;For a &lt;strong&gt;live preview (!)&lt;/strong&gt; of R Markdown output for your active document,&lt;br&gt;
use the &lt;em&gt;infinite moon reader&lt;/em&gt; from the &lt;em&gt;xaringan&lt;/em&gt; package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/install.packages.html&#39;&gt;install.packages&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;xaringan&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# Simply running the function without arguments will start the preview:&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;xaringan&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/pkg/xaringan/man/inf_mr.html&#39;&gt;inf_mr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# To shut down the preview server, if needed, run `servr::daemon_stop()`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h4 id=&#34;visual-markdown-editor&#34;&gt;Visual Markdown Editor&lt;/h4&gt;
&lt;p&gt;If your RStudio version is at least 1.4 (Click &lt;code&gt;Help&lt;/code&gt; =&amp;gt; &lt;code&gt;About RStudio&lt;/code&gt;), which was released last fall, you can also use the &lt;em&gt;Visual Markdown Editor&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This makes writing in R Markdown almost like using a word processor, and also includes many other features such as better citation support with Zotero integration. Read more about the visual editor 
&lt;a href=&#34;https://rstudio.github.io/visual-markdown-editing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To switch between the visual editor and regular (&amp;ldquo;source&amp;rdquo;) editing mode, click the A-shaped ruler button in the top-right corner or press &lt;kbd&gt;Cmd/Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;F4&lt;/kbd&gt;.&lt;/p&gt;
&lt;p&gt;This is what our document looks like in the visual editor &amp;ndash; kind of intermediate between the raw R Markdown and the rendered output:&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=img/visual-editor.png width=&#34;70%&#34;&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;v-a-single-source-doc-many-output-formats&#34;&gt;V: A single source doc, many output formats!&lt;/h2&gt;
&lt;p&gt;One of the greatest features of R Markdown is that you can output to many formats. So from one source document, or very similar variants, you can create completely different output depending on what you need.&lt;/p&gt;
&lt;h4 id=&#34;built-in-output-formats&#34;&gt;Built-in output formats&lt;/h4&gt;
&lt;p&gt;The 
&lt;a href=&#34;https://rmarkdown.rstudio.com/docs/reference/index.html#section-output-formats&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;built-in output formats&lt;/a&gt;, which can be used with just the &lt;em&gt;rmarkdown&lt;/em&gt; package, are listed below. These include HTML, PDF, Word, PowerPoint, and different HTML slide show formats!&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=img/rmarkdown-output-formats.png width=&#34;80%&#34;&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;extension-output-formats&#34;&gt;Extension output formats&lt;/h4&gt;
&lt;p&gt;It&amp;rsquo;s worth highlighting a few of the output formats that can be used with the following packages in the R Markdown ecosystem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://rstudio.github.io/distill/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;distill&lt;/em&gt;&lt;/a&gt; &amp;ndash; An output format geared towards technical content, e.g. with extended support for equations, citations, and footnotes. Can also create websites.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/rstudio/rticles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;rticles&lt;/em&gt;&lt;/a&gt; &amp;ndash; R Markdown templates to format output for specific scientific journals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://rmarkdown.rstudio.com/flexdashboard/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;flexdashboard&lt;/em&gt;&lt;/a&gt; &amp;ndash; Create interactive &amp;ldquo;dashboards&amp;rdquo; to present data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://bookdown.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;bookdown&lt;/em&gt;&lt;/a&gt; &amp;ndash; A book format, the 
&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Markdown book&lt;/a&gt; is an example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/xaringan.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;xaringan&lt;/em&gt;&lt;/a&gt; &amp;ndash; Create fancier presentation slides thanks to a JavaScript library.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Starting to use these and other output formats is often as simple as changing the YAML header:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;distill::distill_article&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;breakout-rooms&#34;&gt;Breakout rooms!&lt;/h2&gt;
&lt;p&gt;In the exercises, we will work with an &lt;code&gt;.Rmd&lt;/code&gt; file that you can download as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# dir.create(&#34;S07&#34;)     # You should have already done this&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# Save the URL for the Rmd file:&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;todays_rmd&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#39;https://raw.githubusercontent.com/biodash/biodash.github.io/master/content/codeclub/07_rmarkdown/penguins.Rmd&#39;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# Download the Rmd file:&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/download.file.html&#39;&gt;download.file&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;url &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;todays_rmd&lt;/span&gt;, destfile &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#39;S07/penguins.Rmd&#39;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next, open the document in RStudio, and fire up the &lt;em&gt;infinite moon reader&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# install.packages(&#34;xaringan&#34;)&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;xaringan&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/pkg/xaringan/man/inf_mr.html&#39;&gt;inf_mr&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This way, you will be able to nearly instantaneously see the effect of your changes: save the document whenever you want the server to update.&lt;/p&gt;
&lt;p&gt;You can use either the &amp;ldquo;visual editor&amp;rdquo; or the regular (&amp;ldquo;source&amp;rdquo;) editor &amp;ndash; and you could also start by compating the two.&lt;/p&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;div&gt;
&lt;h3 id=&#34;exercise-1-output-formatting-with-yaml&#34;&gt;Exercise 1: Output formatting with YAML&lt;/h3&gt;
&lt;p&gt;In this exercise, you will fiddle with the YAML header to modify aspects of the &lt;code&gt;html_document&lt;/code&gt; output format:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add a &lt;code&gt;theme&lt;/code&gt; key to &lt;code&gt;html_output&lt;/code&gt;, and try a few of the available value options (&amp;quot;&lt;em&gt;default&lt;/em&gt;&amp;quot;, &amp;ldquo;&lt;em&gt;cerulean&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;journal&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;flatly&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;darkly&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;readable&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;spacelab&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;united&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;cosmo&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;lumen&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;paper&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;sandstone&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;simplex&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;yeti&lt;/em&gt;&amp;quot;).&lt;/p&gt;
&lt;p&gt;Determine, once and for all, what the best theme is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Try some of the other options mentioned above (&lt;code&gt;code_download&lt;/code&gt;, &lt;code&gt;code_folding&lt;/code&gt;, &lt;code&gt;toc&lt;/code&gt;, &lt;code&gt;toc_float&lt;/code&gt;, &lt;code&gt;toc_depth&lt;/code&gt;, &lt;code&gt;df_print&lt;/code&gt;), and look at the effects on the rendered output.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt;
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To add options to &lt;code&gt;html_document&lt;/code&gt; in the YAML header, you&amp;rsquo;ll need to go from &lt;code&gt;output: html_document&lt;/code&gt; on a single line, to a multi-line format with indentation, and with a colon added after &lt;code&gt;html_document&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html_document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;&amp;lt;option&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solutions (click here) &lt;/summary&gt; &lt;br&gt;
&lt;ul&gt;
&lt;li&gt;An example YAML header with several options added:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Penguins, demystified.&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Jelmer Poelstra&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1/29/2021&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html_document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;theme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;flatly&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;toc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;toc_float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;toc_depth&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number_sections&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;code_download&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;code_folding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;hide&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;df_print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;kable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;div&gt;
&lt;h3 id=&#34;exercise-2-code-chunks&#34;&gt;Exercise 2: Code chunks&lt;/h3&gt;
&lt;p&gt;Our output document looks nice, but there is plenty of room for improvement. In this exercise, we&amp;rsquo;ll refine the output using code chunk options.&lt;/p&gt;
&lt;p&gt;Before you start, take another look at the box 
&lt;a href=&#34;#code-chunk-options&#34;&gt;Code chunk options&lt;/a&gt; above.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Did you notice those messages (when the &lt;em&gt;tidyverse&lt;/em&gt; is loaded) and warnings (for the two plots) in the output? Let&amp;rsquo;s get rid of those all at once: suppress R &lt;em&gt;messages&lt;/em&gt; and &lt;em&gt;warnings&lt;/em&gt; for all chunks by adding arguments to the &lt;code&gt;knitr::opts_chunk$set()&lt;/code&gt; function in the first code chunk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Currently, the code line in the &lt;code&gt;install-package&lt;/code&gt; code chunk is commented out to avoid the code from running, while still printing it. Try to accomplish this using a code chunk option instead, so you can uncomment the line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We do want to print the code in some cases, but not in others. For the chunk labeled &lt;code&gt;print-tibble&lt;/code&gt;, which prints &lt;code&gt;penguins&lt;/code&gt;, alter the settings such that the code is no longer printed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Our first figure is kind of squished, and the point and font sizes are perhaps too large. Compare this with the second figure, which has a different setting &lt;em&gt;only&lt;/em&gt; for &lt;code&gt;out.width&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Play around with the values for the three options that are already in the code chunks (&lt;code&gt;fig.width&lt;/code&gt;, &lt;code&gt;out.width&lt;/code&gt;, and &lt;code&gt;fig.asp&lt;/code&gt;), for one or both figures, see what the effects are, and try to make some improvements.&lt;/p&gt;
&lt;p&gt;Do you understand the difference between the two methods to indicate the figure size (&lt;code&gt;fig.width&lt;/code&gt; and &lt;code&gt;out.width&lt;/code&gt;)?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insert a new code chunk that prints the &lt;code&gt;penguins_raw&lt;/code&gt; tibble in some way (this is available in your environment).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt;
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To suppress messages and warnings throughout:&lt;br&gt;
Add &lt;code&gt;message=FALSE&lt;/code&gt; and &lt;code&gt;warnings=FALSE&lt;/code&gt; inside &lt;code&gt;knitr::opts_chunk$set()&lt;/code&gt; in the &lt;code&gt;setup&lt;/code&gt; chunk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To avoid running the code:&lt;br&gt;
Use &lt;code&gt;eval=FALSE&lt;/code&gt; in the header of the &lt;code&gt;install-package&lt;/code&gt; code chunk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To avoid printing the code:&lt;br&gt;
Use the &lt;code&gt;echo&lt;/code&gt; option in the header of the &lt;code&gt;print-tibble&lt;/code&gt; code chunk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Figure sizing:&lt;br&gt;
There are two types of sizes that you can set: the size at which R creates figures (&lt;code&gt;fig.width&lt;/code&gt; and &lt;code&gt;fig.height&lt;/code&gt;), and the size at which the figures are inserted in the document (&lt;code&gt;out.width&lt;/code&gt; and &lt;code&gt;out.height&lt;/code&gt;). The former will effectively only control relative font and point sizes, whereas the latter controls the &amp;ldquo;actual&amp;rdquo; / final size. For more details and advice, see 
&lt;a href=&#34;https://r4ds.had.co.nz/graphics-for-communication.html#figure-sizing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this section&lt;/a&gt; in R for Data Science.&lt;/p&gt;
&lt;p&gt;The aspect ratio (&lt;code&gt;fig.asp&lt;/code&gt;) is height/width, so a value smaller than one creates a wide figure and a value larger than one creates a narrow figure.&lt;/p&gt;
&lt;p&gt;Here, we&amp;rsquo;ve been setting width only &amp;ndash; you can also set &lt;code&gt;fig.height&lt;/code&gt; and &lt;code&gt;out.height&lt;/code&gt;, but these options become redundant when you set the width &lt;em&gt;and&lt;/em&gt; the aspect ratio.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solutions (click here) &lt;/summary&gt; &lt;br&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To suppress messages and warnings throughout:&lt;br&gt;
&lt;code&gt;knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To avoid running the code: &lt;code&gt;{r install-package, eval=FALSE}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To avoid printing the code:&lt;br&gt;
&lt;code&gt;{r print-tibble, echo=FALSE}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Figure sizing:&lt;br&gt;
Example settings for better-sized figures &amp;ndash;&lt;br&gt;
&lt;code&gt;{r plot-bills, out.width=&amp;quot;80%&amp;quot;, fig.width=6, fig.asp=0.7}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A code chunk to print the &lt;code&gt;penguins_raw&lt;/code&gt; tibble (replace single quotes by backticks):&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- --&gt;
&lt;pre&gt;&lt;code&gt;&#39;&#39;&#39;{r}
penguins_raw
&#39;&#39;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;div&gt;
&lt;h3 id=&#34;bonus-1-markdown-and-inline-code&#34;&gt;Bonus 1: Markdown and inline code&lt;/h3&gt;
&lt;p&gt;The formatting for the prose in our document could also be improved. For instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use inline code &lt;em&gt;formatting&lt;/em&gt; in a couple of cases where this is appropriate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instead of simply saying &amp;ldquo;8 variables (n = 344 penguins)&amp;rdquo; (under the &lt;em&gt;Summary of the dataset&lt;/em&gt;&amp;quot; heading), use &lt;em&gt;inline R code&lt;/em&gt; that makes these calculations and print the results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Try a couple of other things: heading levels (one of them is currently not right!), &lt;em&gt;italic&lt;/em&gt; text, &lt;strong&gt;bold&lt;/strong&gt; text, and/or ordered (numbered) and unordered (bulleted) lists.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt;
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simply put backticks around the inline text you want have formatted as code. You can do this, for instance, for mentions of 
&lt;a href=&#34;https://allisonhorst.github.io/palmerpenguins/reference/penguins.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;palmerpenguins::penguins&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For inline code that runs, use &lt;code&gt;`r my-code`&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The number of variables and penguins in the penguin dataset are the number of columns and rows, respectively, in the &lt;code&gt;penguin&lt;/code&gt; tibble.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solutions (click here) &lt;/summary&gt; &lt;br&gt;
&lt;p&gt;Inline calculation of the number of variables and penguins:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[...] that contains `r ncol(penguins)` variables
(n = `r nrow(penguins)` penguins).
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;div&gt;
&lt;h3 id=&#34;bonus-2-other-output-formats&#34;&gt;Bonus 2: Other output formats&lt;/h3&gt;
&lt;p&gt;Try one or more output formats other than &lt;code&gt;html_document&lt;/code&gt;, see 
&lt;a href=&#34;https://rmarkdown.rstudio.com/docs/reference/index.html#section-output-formats&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this website&lt;/a&gt; for the list of available options. If you want to try presentations, note that three dashes &lt;code&gt;---&lt;/code&gt; are used to separate slides.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;p&gt;It might be confusing that on the website linked to above (see also the screenshot in section V), the output formats are listed &lt;em&gt;functions&lt;/em&gt; (&lt;code&gt;html_document()&lt;/code&gt; rather than &lt;code&gt;html_document&lt;/code&gt;) &amp;ndash; but this is simply because under the hood, these functions are called via the YAML header.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;go-further&#34;&gt;Go further&lt;/h2&gt;
&lt;h4 id=&#34;pitfalls--tips&#34;&gt;Pitfalls / Tips&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The working directory&lt;/strong&gt;&lt;br&gt;
By default, the working directory for an R Markdown document is the directory in which the file resides.&lt;/p&gt;
&lt;p&gt;This can be a bit annoying if you&amp;rsquo;re used to using your project&amp;rsquo;s root directory as your working directory (which you should be) and the R Markdown file is not in the project&amp;rsquo;s root directory (which it probably shouldn&amp;rsquo;t be). Nevertheless, simply using &lt;code&gt;../&lt;/code&gt; notation to move one or two directories up should generally work.&lt;/p&gt;
&lt;p&gt;If you really need to set a different working directory, you should be aware that surprisingly, setting the working directory with &lt;code&gt;setwd()&lt;/code&gt; in a code chunk is &lt;strong&gt;not persistent&lt;/strong&gt; across code chunks. To set a different working directory for the entire document, use &lt;code&gt;knitr::opts_knit$set(root.dir = &#39;/my/working/dir&#39;)&lt;/code&gt; in a setup chunk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Chunk labels&lt;/strong&gt;&lt;br&gt;
Chunk labels are optional but if you do give them, note that they have to be &lt;em&gt;unique&lt;/em&gt;: the document will fail to render if have two chunks with the same label. Also, &lt;em&gt;avoid using spaces and underscores in the labels&lt;/em&gt; (&lt;code&gt;good-chunk-label&lt;/code&gt;, &lt;code&gt;bad chunk label&lt;/code&gt;, &lt;code&gt;bad_chunk_label&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id=&#34;tables&#34;&gt;Tables&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tables produced by Markdown text&lt;/strong&gt;&lt;br&gt;
The syntax for basic Markdown tables is as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| Time          | Session | Topic    |
|:--------------|:-------:|---------:|
| _left_        | _center_| _right_  |
| Wed 5 pm      | 1       | Getting started  |
| Fri 3 pm      |         |          |
| Wed 5 pm      | 2       | *dplyr*  |
| Fri 3 pm      |         | *Break*  |
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Time&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Session&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Topic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;em&gt;left&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;center&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;em&gt;right&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Wed 5 pm&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Getting started&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Fri 3 pm&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Wed 5 pm&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;em&gt;dplyr&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Fri 3 pm&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&lt;em&gt;Break&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In the Visual Markdown editor in RStudio, you can simply insert a table with a little dialogue box after clicking &lt;code&gt;Table&lt;/code&gt; =&amp;gt; &lt;code&gt;Insert Table&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Tables (dataframes) produced by R code&lt;/strong&gt;&lt;br&gt;
Using &lt;code&gt;kable(my_df)&lt;/code&gt; in a code chunk will create nicer output for individual dataframes (recall the &lt;code&gt;df_print: kable&lt;/code&gt; YAML option for document-wide &amp;ldquo;kable&amp;rdquo; printing).&lt;/p&gt;
&lt;p&gt;There are many packages available for more advanced options, such as 
&lt;a href=&#34;https://gt.rstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;GT&lt;/em&gt;&lt;/a&gt;, 
&lt;a href=&#34;https://rstudio.github.io/DT/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;DT&lt;/em&gt;&lt;/a&gt;, and 
&lt;a href=&#34;https://glin.github.io/reactable/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;reactable&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id=&#34;websites&#34;&gt;Websites&lt;/h4&gt;
&lt;p&gt;Note that &lt;code&gt;rmarkdown::render_site()&lt;/code&gt; can create simple websites that connects multiple pages with a navigation bar. All you need is a simple YAML file called &lt;code&gt;_site.yml&lt;/code&gt; with some settings, and a file for the front page which needs to be called &lt;code&gt;index.Rmd&lt;/code&gt;. See 
&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here in the R Markdown book&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Options with more features, like a blog, are 
&lt;a href=&#34;https://rstudio.github.io/distill/website.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;distill websites&lt;/em&gt;&lt;/a&gt;, and the 
&lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;blogdown&lt;/em&gt; package&lt;/a&gt; for Hugo sites.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;further-resources&#34;&gt;Further resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Free online books by the primary creator of R Markdown and other authors:
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Markdown &amp;ndash; The Definitive Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://bookdown.org/yihui/rmarkdown-cookbook/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R Markdown Cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio&amp;rsquo;s 5-page R Markdown Reference PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/rstudio/cheatsheets/raw/master/rmarkdown-2.0.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio&amp;rsquo;s R Markdown Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://rmarkdown.rstudio.com/lesson-1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio R Markdown lessons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://commonmark.org/help/tutorial/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Markdown tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Session 6: Factors</title>
      <link>https://biodash.github.io/codeclub/06_factors/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/06_factors/</guid>
      <description>&lt;p&gt;&lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Factors form the basis for many powerful operations in R, including many performed on tabular data. The motivation for factors comes from the notion of categorical variables. These variables are non-numeric in nature corresponding to categories such as male and female, or Democrat, Republican and Independent.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A factor might be viewed simply as a vector with a bit of more information added.&lt;/strong&gt; The extra information consists of a record of distinct values in that vector, which are called: &lt;em&gt;&lt;strong&gt;levels&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let us look at some examples of factors. We will make use of the package &lt;em&gt;forcats&lt;/em&gt;, which is one of the 8 core &lt;em&gt;tidyverse&lt;/em&gt; packages. Therefore, we start by loading the &lt;em&gt;tidyverse&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;http://tidyverse.tidyverse.org&#39;&gt;tidyverse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Attaching packages&lt;/span&gt;&lt;span&gt; ─────────────────────────────────────── tidyverse 1.3.0 ──&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;ggplot2&lt;/span&gt;&lt;span&gt; 3.3.3     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;purrr  &lt;/span&gt;&lt;span&gt; 0.3.4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;tibble &lt;/span&gt;&lt;span&gt; 3.0.4     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr  &lt;/span&gt;&lt;span&gt; 1.0.2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;tidyr  &lt;/span&gt;&lt;span&gt; 1.1.2     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stringr&lt;/span&gt;&lt;span&gt; 1.4.0&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;readr  &lt;/span&gt;&lt;span&gt; 1.4.0     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;forcats&lt;/span&gt;&lt;span&gt; 0.5.0&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Conflicts&lt;/span&gt;&lt;span&gt; ────────────────────────────────────────── tidyverse_conflicts() ──&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;filter()&lt;/span&gt;&lt;span&gt; masks &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;&lt;span&gt;::filter()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;lag()&lt;/span&gt;&lt;span&gt;    masks &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;&lt;span&gt;::lag()&lt;/span&gt;&lt;/span&gt;


&lt;span class=&#39;c&#39;&gt;## Check whether &#34;forcats&#34; is listed among the loaded packages.&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;## Alternatively, you could load &#34;forcats&#34; (and &#34;ggplot2&#34;) separately:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;# install.packages(&#34;forcats&#34;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;# library(forcats)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;# library(ggplot2)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;example-1-from-a-numeric-vector-to-a-factor&#34;&gt;Example 1: From a numeric vector to a factor&lt;/h2&gt;
&lt;p&gt;Let us create a factor &lt;code&gt;xf&lt;/code&gt; from a vector &lt;code&gt;x&lt;/code&gt; with the numbers &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;12&lt;/code&gt;, &lt;code&gt;13&lt;/code&gt;, and &lt;code&gt;12&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;5&lt;/span&gt;,&lt;span class=&#39;m&#39;&gt;12&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;13&lt;/span&gt;,&lt;span class=&#39;m&#39;&gt;12&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1]  5 12 13 12&lt;/span&gt;


&lt;span class=&#39;c&#39;&gt;# Convert the vector to a factor:&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;xf&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/factor.html&#39;&gt;factor&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;x&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;xf&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 5  12 13 12&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; Levels: 5 12 13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;distinct values&lt;/em&gt; in &lt;code&gt;xf&lt;/code&gt; are &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;12&lt;/code&gt; and &lt;code&gt;13&lt;/code&gt;, and are listed as &lt;em&gt;levels&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let us look in a bit more details at our factor using the R functions &lt;code&gt;str&lt;/code&gt; and &lt;code&gt;unclass&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;xf&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  Factor w/ 3 levels &#34;5&#34;,&#34;12&#34;,&#34;13&#34;: 1 2 3 2&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/class.html&#39;&gt;unclass&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;xf&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 2 3 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; attr(,&#34;levels&#34;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;5&#34;  &#34;12&#34; &#34;13&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Notice that the values in the factor are not stored as &lt;code&gt;(5, 12, 13, 12)&lt;/code&gt;, but rather as &lt;code&gt;(1, 2, 3, 2)&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;This means that our data consists first of a level-1 value, then level-2 and level 3 values, and finally another level-2 value. So, the data has been recorded by level.&lt;/p&gt;
&lt;p&gt;The values attached to each level are recorded too, but as &lt;em&gt;characters&lt;/em&gt; such as &lt;code&gt;&amp;quot;5&amp;quot;&lt;/code&gt; rather than as numbers such as &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;example-2-from-a-character-vector-to-a-factor&#34;&gt;Example 2: From a character vector to a factor&lt;/h2&gt;
&lt;p&gt;We will use the levels Democrat (&lt;code&gt;D&lt;/code&gt;), Republican (&lt;code&gt;R&lt;/code&gt;), and Independent (&lt;code&gt;I&lt;/code&gt;). First, we save a &lt;em&gt;vector&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;y&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;D&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;R&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;R&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;I&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;R&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;I&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;D&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;I&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;y&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;D&#34; &#34;R&#34; &#34;R&#34; &#34;I&#34; &#34;R&#34; &#34;I&#34; &#34;D&#34; &#34;I&#34;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  chr [1:8] &#34;D&#34; &#34;R&#34; &#34;R&#34; &#34;I&#34; &#34;R&#34; &#34;I&#34; &#34;D&#34; &#34;I&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then, we again convert the &lt;em&gt;vector&lt;/em&gt; to a &lt;em&gt;factor&lt;/em&gt;, and look at the levels:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;fy&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/factor.html&#39;&gt;factor&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;y&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;fy&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] D R R I R I D I&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; Levels: D I R&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/class.html&#39;&gt;unclass&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;fy&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 1 3 3 2 3 2 1 2&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; attr(,&#34;levels&#34;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;D&#34; &#34;I&#34; &#34;R&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;example-3-ordering-factor-levels&#34;&gt;Example 3: Ordering factor levels&lt;/h2&gt;
&lt;p&gt;Some variables can be challenging to sort automatically, because the desired sorting order is not alphabetical or numeric.&lt;/p&gt;
&lt;p&gt;For instance, months that are listed using characters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;months_vector&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;Dec&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Apr&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Jan&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Mar&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# Try to sort using the `sort` function&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/sort.html&#39;&gt;sort&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;months_vector&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] &#34;Apr&#34; &#34;Dec&#34; &#34;Jan&#34; &#34;Mar&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;That didn&amp;rsquo;t sort in a useful way. &lt;strong&gt;But, the problem can be fixed by using a factor.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, we create a list of the valid levels, which are all 12 months in a year:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;month_levels&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;Jan&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Feb&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Mar&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Apr&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;May&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Jun&#34;&lt;/span&gt;,
                  &lt;span class=&#39;s&#39;&gt;&#34;Jul&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Aug&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Sep&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Oct&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Nov&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Dec&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then we convert the vector into a factor, like before, but now we additionally specify the desired levels of the factor, &lt;strong&gt;in order&lt;/strong&gt;, using the &lt;code&gt;levels&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;months_factor&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/factor.html&#39;&gt;factor&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;months_vector&lt;/span&gt;, levels &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;month_levels&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now it sorts the way we want to!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/sort.html&#39;&gt;sort&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;months_factor&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] Jan Mar Apr Dec&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;example-4-use-of-factors-in-plots-with-forcats&#34;&gt;Example 4: Use of factors in plots with &lt;em&gt;forcats&lt;/em&gt;&lt;/h2&gt;
&lt;h3 id=&#34;4a-plot-after-reordering-manually-with-fct_relevel&#34;&gt;4A: Plot after reordering manually with &lt;code&gt;fct_relevel()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We will use the &lt;em&gt;mtcars&lt;/em&gt; data, which was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973&amp;ndash;74 models) &amp;ndash; a data frame with 32 observations for 11 (numeric) variables,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/data.html&#39;&gt;data&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mtcars&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/names.html&#39;&gt;names&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mtcars&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;  [1] &#34;mpg&#34;  &#34;cyl&#34;  &#34;disp&#34; &#34;hp&#34;   &#34;drat&#34; &#34;wt&#34;   &#34;qsec&#34; &#34;vs&#34;   &#34;am&#34;   &#34;gear&#34;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; [11] &#34;carb&#34;&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/dim.html&#39;&gt;dim&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mtcars&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 32 11&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;mtcars&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &#39;data.frame&#39;:  32 obs. of  11 variables:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ disp: num  160 160 108 258 360 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ qsec: num  16.5 17 18.6 19.4 17 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ am  : num  1 1 1 0 0 0 0 0 0 0 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ gear: num  4 4 4 3 3 3 3 4 4 4 ...&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;  $ carb: num  4 4 1 1 2 1 4 2 2 4 ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;we will select six variables (&lt;code&gt;mpg&lt;/code&gt;, &lt;code&gt;cyl&lt;/code&gt;, &lt;code&gt;disp&lt;/code&gt;, &lt;code&gt;hp&lt;/code&gt;, and &lt;code&gt;wt&lt;/code&gt;) to create a dataset &lt;code&gt;Data&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mpg&lt;/code&gt;: Miles per (US) gallon,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cyl&lt;/code&gt;: Number of cylinders&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disp&lt;/code&gt;: Displacement (cu.in.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hp&lt;/code&gt;: Horse power&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wt&lt;/code&gt;: Weight (in 1000 lbs)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;Data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;mtcars&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;select&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;mpg&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;cyl&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;disp&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;hp&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;wt&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now, we&amp;rsquo;ll add a new column &lt;code&gt;cyl_chr&lt;/code&gt; by converting &lt;code&gt;cyl&lt;/code&gt; from &lt;em&gt;numeric&lt;/em&gt; to &lt;em&gt;character&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;Data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;Data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;mutate&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;cyl_chr &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;recode&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;cyl&lt;/span&gt;,`4` &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;Four&#34;&lt;/span&gt;, `6` &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;Six&#34;&lt;/span&gt;, `8` &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;Eight&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/head.html&#39;&gt;head&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;Data&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;    mpg cyl disp  hp    wt cyl_chr&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 1 21.0   6  160 110 2.620     Six&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 2 21.0   6  160 110 2.875     Six&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 3 22.8   4  108  93 2.320    Four&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 4 21.4   6  258 110 3.215     Six&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 5 18.7   8  360 175 3.440   Eight&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 6 18.1   6  225 105 3.460     Six&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We plot a bar chart for &lt;code&gt;cyl_chr&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;Data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;cyl_chr&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_bar&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-13-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In the plot, the levels of the factor were arranged in alphabetical order (&lt;code&gt;Eight&lt;/code&gt;, &lt;code&gt;Four&lt;/code&gt;, and &lt;code&gt;Six&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Instead, we want the bar graph arranged in the order &lt;code&gt;Four&lt;/code&gt;, &lt;code&gt;Six&lt;/code&gt;, and &lt;code&gt;Eight&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An alternative to using 
&lt;a href=&#34;https://rdrr.io/r/base/factor.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;factor(levels = ...)&lt;/code&gt;&lt;/a&gt; like we did above, is to use the &lt;code&gt;fct_relevel()&lt;/code&gt; function from the &lt;em&gt;forcats&lt;/em&gt; package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;Data&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;mutate&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;cyl_chr &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;fct_relevel&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;cyl_chr&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Four&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Six&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Eight&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;cyl_chr&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_bar&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;labs&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;Cylinder&#34;&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;Number of cars&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-14-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;4b-plot-after-reordering-by-the-value-of-another-column-fct_reorder&#34;&gt;4B: Plot after reordering by the value of another column (&lt;code&gt;fct_reorder&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Create a dataset called &lt;code&gt;Data_a&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;Data_a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/data.frame.html&#39;&gt;data.frame&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;name &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/c.html&#39;&gt;c&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;North&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;South&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;East&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;West&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
                     var &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/sample.html&#39;&gt;sample&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/seq.html&#39;&gt;seq&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;10&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;m&#39;&gt;4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Plot a bar chart of &lt;code&gt;Data_a&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;Data_a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;name&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;var&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_bar&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;stat &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;identity&#34;&lt;/span&gt;, fill &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;#f68034&#34;&lt;/span&gt;, alpha &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;0.6&lt;/span&gt;, width &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;0.4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-16-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Reorder following the value of another column using the &lt;code&gt;fct_reorder()&lt;/code&gt; function, and flip the plot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;Data_a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;mutate&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;name &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;fct_reorder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;name&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;var&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;name&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;var&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_bar&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;stat &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;identity&#34;&lt;/span&gt;, fill &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;#f68034&#34;&lt;/span&gt;, alpha &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;0.6&lt;/span&gt;, width &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;0.4&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;coord_flip&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-17-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;There are several more convenient reordering functions in the &lt;em&gt;forcats&lt;/em&gt; package, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fact_infreq()&lt;/code&gt; to reorder by occurrence frequencies of each level (see the picture at the top of the post).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fct_inorder()&lt;/code&gt; to reorder by order of appearance in the dataframe. This can be useful, for example, if your dataframe has already been sorted properly, and you just need to prevent automatic alphabetic reordering when plotting.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;breakout-rooms&#34;&gt;Breakout rooms!&lt;/h2&gt;
&lt;p&gt;For the Breakout room exercises, we will use datasets from &lt;em&gt;mtcars&lt;/em&gt; and the &lt;code&gt;gss_cat&lt;/code&gt; dataset from the &lt;em&gt;forcats&lt;/em&gt; package.&lt;/p&gt;
&lt;h3 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;div&gt;
&lt;p&gt;Convert the variable &lt;code&gt;gear&lt;/code&gt; from &lt;em&gt;mtcars&lt;/em&gt; to a character vector with words for each number (link in example 4A), and plot a bar chart.&lt;/p&gt;
&lt;p&gt;Then, use a factor to reorder the bars to appear in the regular &amp;ldquo;numeric&amp;rdquo; order: &amp;ldquo;Three&amp;rdquo; then &amp;ldquo;Four&amp;rdquo; then &amp;ldquo;Five&amp;rdquo;.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt;
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, create a dataframe with a column that codes the gears as words, using the &lt;code&gt;mutate()&lt;/code&gt; and &lt;code&gt;recode()&lt;/code&gt; functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then, create a factor from this modified gear column, and order it manually using the &lt;code&gt;fct_relevel()&lt;/code&gt; function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solutions (click here) &lt;/summary&gt; &lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Start by loading the dataset:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/data.html&#39;&gt;data&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;mtcars&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Now, create a new dataset &lt;code&gt;Gear&lt;/code&gt; from &lt;em&gt;mtcars&lt;/em&gt;, adding a column &lt;code&gt;gear_chr&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;gear_df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;mtcars&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;mutate&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;gear_chr &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;recode&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;gear&lt;/span&gt;,
                         `3`&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;Three&#34;&lt;/span&gt;,
                         `4` &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;Four&#34;&lt;/span&gt;,
                         `5`&lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;Five&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/head.html&#39;&gt;head&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;gear_df&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt;    mpg cyl disp  hp drat    wt  qsec vs am gear carb gear_chr&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4     Four&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4     Four&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1     Four&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1    Three&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2    Three&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; 6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1    Three&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Finally, use the &lt;em&gt;forcats&lt;/em&gt; function &lt;code&gt;fct_relevel()&lt;/code&gt; to rearrange &lt;code&gt;gear_chr&lt;/code&gt; in nonalphabetical order, and plot the barchart using &lt;code&gt;geom_bar()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;gear_df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;mutate&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;gear_fct &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;fct_relevel&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;gear_chr&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Three&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Four&#34;&lt;/span&gt;, &lt;span class=&#39;s&#39;&gt;&#34;Five&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;gear_fct&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_bar&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;labs&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;Gear&#34;&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;Number of cars&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-20-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h3 id=&#34;exercise-2&#34;&gt;Exercise 2&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;div&gt;
&lt;p&gt;Using the &lt;code&gt;gss_cat&lt;/code&gt; dataset from the &lt;em&gt;forcats&lt;/em&gt; package (available as &lt;code&gt;gsscat&lt;/code&gt; in your environment), create a plot that compares the average number of hours spent watching TV per day across religions, and where &lt;em&gt;religions are ordered by the average number of hours&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;(Despite what we&amp;rsquo;ve learned last week, start by merely plotting the mean, and no distributions, using a barplot or with &lt;code&gt;geom_point()&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Source: (R for Data Science)&lt;/em&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt; &lt;br&gt; In order to be able to order the factor by the average number of hours spent watching TV, first compute this average per religion, and save the results in a dataframe (use `mutate()` and `summarize()`).
&lt;p&gt;Then, use &lt;code&gt;fct_recorder()&lt;/code&gt; to reorder the factor.&lt;/p&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solutions (click here) &lt;/summary&gt; &lt;br&gt;
&lt;p&gt;First, have a look at the dataset:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nf&#39;&gt;forcats&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;::&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://forcats.tidyverse.org/reference/gss_cat.html&#39;&gt;gss_cat&lt;/a&gt;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# A tibble: 21,483 x 9&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;     year marital     age race  rincome    partyid     relig     denom    tvhours&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;fct&amp;gt;&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;fct&amp;gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;fct&amp;gt;&lt;/span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;fct&amp;gt;&lt;/span&gt;&lt;span&gt;       &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;fct&amp;gt;&lt;/span&gt;&lt;span&gt;     &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;fct&amp;gt;&lt;/span&gt;&lt;span&gt;      &lt;/span&gt;&lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 1&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;000 Never ma…    26 White $8000 to … Ind,near r… Protesta… Souther…      12&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 2&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;000 Divorced     48 White $8000 to … Not str re… Protesta… Baptist…      &lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;NA&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 3&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;000 Widowed      67 White Not appli… Independent Protesta… No deno…       2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 4&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;000 Never ma…    39 White Not appli… Ind,near r… Orthodox… Not app…       4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 5&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;000 Divorced     25 White Not appli… Not str de… None      Not app…       1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 6&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;000 Married      25 White $20000 - … Strong dem… Protesta… Souther…      &lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;NA&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 7&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;000 Never ma…    36 White $25000 or… Not str re… Christian Not app…       3&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 8&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;000 Divorced     44 White $7000 to … Ind,near d… Protesta… Luthera…      &lt;/span&gt;&lt;span style=&#39;color: #BB0000;&#39;&gt;NA&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt; 9&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;000 Married      44 White $25000 or… Not str de… Protesta… Other          0&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;10&lt;/span&gt;&lt;span&gt;  &lt;/span&gt;&lt;span style=&#39;text-decoration: underline;&#39;&gt;2&lt;/span&gt;&lt;span&gt;000 Married      47 White $25000 or… Strong rep… Protesta… Souther…       3&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #555555;&#39;&gt;# … with 21,473 more rows&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then, calculate the mean number of tv-hours and create a plot:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;relig&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;gss_cat&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;group_by&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;relig&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;summarize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;tvhours &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/mean.html&#39;&gt;mean&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;tvhours&lt;/span&gt;, na.rm &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; `summarise()` ungrouping output (override with `.groups` argument)&lt;/span&gt;


&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;relig&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;tvhours&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;relig&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-22-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It is difficult to interpret this plot because there is no overall pattern.&lt;/p&gt;
&lt;p&gt;We can improve the plot by reordering the level of religion using &lt;code&gt;fct_reorder()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;relig&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;gss_cat&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;group_by&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;relig&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;summarize&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;tvhours &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/mean.html&#39;&gt;mean&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;tvhours&lt;/span&gt;, na.rm &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; `summarise()` ungrouping output (override with `.groups` argument)&lt;/span&gt;


&lt;span class=&#39;nv&#39;&gt;relig&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;mutate&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;relig &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;fct_reorder&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;relig&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;tvhours&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;%&amp;gt;%&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;tvhours&lt;/span&gt;, &lt;span class=&#39;nv&#39;&gt;relig&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;geom_point&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-23-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Reordering religion makes it much easier to see that people in the &amp;ldquo;Don&amp;rsquo;t know&amp;rdquo; category watch much more TV.&lt;/p&gt;
&lt;br&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3 id=&#34;bonus-exercise-3&#34;&gt;Bonus: Exercise 3&lt;/h3&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;div&gt;
&lt;p&gt;In exercise 2, we saw large differences in the &lt;em&gt;average&lt;/em&gt; time spent watching TV across religions, but we should perhaps have a closer look at the data by plotting distributions.&lt;/p&gt;
&lt;p&gt;Go back to the 
&lt;a href=&#34;https://biodash.github.io/codeclub/05_ggplot-round-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous Code Club session&lt;/a&gt; and decide which type of plot could be ideal with so many categories.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt; &lt;br&gt; [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html) from the *ggridges* package is very well suited for a plot with so many categories.
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solutions (click here) &lt;/summary&gt; &lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;https://wilkelab.org/ggridges/&#39;&gt;ggridges&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;ggplot&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;gss_cat&lt;/span&gt;, &lt;span class=&#39;nf&#39;&gt;aes&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;tvhours&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;relig&lt;/span&gt;, fill &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;relig&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://wilkelab.org/ggridges/reference/geom_density_ridges.html&#39;&gt;geom_density_ridges&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;alpha &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;0.8&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;labs&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;x &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#39;Number of hours spent watching TV&#39;&lt;/span&gt;, y &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#39;Religion&#39;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;guides&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;fill &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;FALSE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
  &lt;span class=&#39;nf&#39;&gt;theme_minimal&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Picking joint bandwidth of 0.586&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Warning: Removed 10146 rows containing non-finite values (stat_density_ridges).&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;figs/unnamed-chunk-24-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Session 1: Backyard Birds</title>
      <link>https://biodash.github.io/codeclub/01_backyard-birds/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/01_backyard-birds/</guid>
      <description>&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;prep-homework&#34;&gt;Prep homework&lt;/h2&gt;
&lt;h4 id=&#34;basic-computer-setup&#34;&gt;Basic computer setup&lt;/h4&gt;
&lt;p&gt;If you didn&amp;rsquo;t already do this, please follow the 
&lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions.&lt;/p&gt;
&lt;h4 id=&#34;test-if-it-works&#34;&gt;Test if it works&lt;/h4&gt;
&lt;p&gt;Please open RStudio locally or 
&lt;a href=&#34;https://biodash.github.io/codeclub-setup/#osc-run-rstudio&#34;&gt;start an OSC RStudio Server session&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nov 19 addition: If you&amp;rsquo;re working locally, test if you can load the &lt;em&gt;tidyverse&lt;/em&gt; package with 
&lt;a href=&#34;http://tidyverse.tidyverse.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;library(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;&lt;/a&gt; inside R.&lt;/strong&gt; (If you haven&amp;rsquo;t installed the &lt;em&gt;tidyverse&lt;/em&gt; yet, please go to the 
&lt;a href=&#34;https://biodash.github.io/codeclub-setup/#install-tidy&#34;&gt;Code Club Computer Setup&lt;/a&gt; instructions.)&lt;/p&gt;
&lt;p&gt;If you have not used RStudio before, take a moment to explore what&amp;rsquo;s in the panels and tabs. (It may help to check out 
&lt;a href=&#34;https://www.youtube.com/watch?v=ByxF3xjN2JQ&amp;amp;list=PLxhIMi78eQegFm3XqsylVa-Lm7nfiUshe&amp;amp;t=2m15s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mike Sovic&amp;rsquo;s 1-minute intro to the RStudio interface&lt;/a&gt; or 
&lt;a href=&#34;https://fast.wistia.net/embed/iframe/520zbd3tij?videoFoam=true&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio&amp;rsquo;s 3-minute intro&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re able to do so, please open RStudio again a bit before Code Club starts &amp;ndash; and in case you run into issues, please join the Zoom call early and we&amp;rsquo;ll troubleshoot.&lt;/p&gt;
&lt;h4 id=&#34;new-to-r&#34;&gt;New to R?&lt;/h4&gt;
&lt;p&gt;If you&amp;rsquo;re completely new to R, it will be useful to have a look at some of the resources listed on our 
&lt;a href=&#34;https://biodash.github.io/codeclub-novice/&#34;&gt;New to R?&lt;/a&gt; page prior to Code Club.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;slides&#34;&gt;Slides&lt;/h2&gt;
&lt;p&gt;On Friday, we started with a couple of 
&lt;a href=&#34;https://biodash.github.io/slides/CC01/&#34;&gt;introductory slides&lt;/a&gt;.&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&#34;1---create-an-rstudio-project&#34;&gt;1 - Create an RStudio Project&lt;/h2&gt;
&lt;p&gt;Projects are an RStudio-specific concept that create a special file (&lt;code&gt;.Rproj&lt;/code&gt;), primarily to designate a directory as the working directory for everything within it. We recommend &lt;em&gt;creating exactly one separate Project for each research project&lt;/em&gt; with an R component &amp;ndash; and for things like Code Club.&lt;/p&gt;
&lt;br&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Why use Projects?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In brief, Projects help you to organize your work and to make it more portable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;They record which scripts (and R Markdown files) are open in RStudio, and will reopen all of those when you reopen the project. This becomes quite handy, say, when you work on three different projects, each of which uses a number of scripts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When using Projects, you generally don&amp;rsquo;t have to manually set your working directory, and can use &lt;em&gt;relative file paths&lt;/em&gt; to refer to files within the project. This way, even if you move the project directory, or copy it to a different computer, the same paths will still work. (This would not be the case if you used 
&lt;a href=&#34;https://rdrr.io/r/base/getwd.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;setwd()&lt;/code&gt;&lt;/a&gt; which will generally require you to use an absolute path, e.g. 
&lt;a href=&#34;https://rdrr.io/r/base/getwd.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;setwd(&amp;quot;C:/Users/Jelmer/Documents/&amp;quot;)&lt;/code&gt;&lt;/a&gt;.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projects encourage you to organize research projects inside self-contained directories, rather than with files spread around your computer. This can save you a lot of headaches and increases reproducibility. And because R will restart whenever you switch Projects, there is no risk of unwanted cross-talk between your projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s create an RStudio Project for Code Club:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open RStudio locally or 
&lt;a href=&#34;https://biodash.github.io/codeclub-setup/#osc-run-rstudio&#34;&gt;start an OSC RStudio Server session&lt;/a&gt;.&lt;br&gt;
(&lt;em&gt;If you&amp;rsquo;re at OSC&lt;/em&gt;, you should see a file &lt;code&gt;0_CODECLUB.md&lt;/code&gt; that&amp;rsquo;s open in your top-left panel. You can ignore/close this file.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re working locally&lt;/em&gt;, create a directory wherever you like on your computer for all things Code Club. You can do this in R using 
&lt;a href=&#34;https://rdrr.io/r/base/files2.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;dir.create(&amp;quot;path/to/your/dir&amp;quot;)&lt;/code&gt;&lt;/a&gt;, or outside of R.&lt;br&gt;
(&lt;em&gt;If you&amp;rsquo;re at OSC&lt;/em&gt;, skip this step because you&amp;rsquo;re automatically inside a Code Club-specific, personal directory.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;code&gt;File&lt;/code&gt; (top menu bar) &amp;gt; &lt;code&gt;New Project&lt;/code&gt;, and then select &lt;code&gt;Existing Directory&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re working locally&lt;/em&gt;, select the Code Club directory that you created in the previous step.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re working at OSC&lt;/em&gt;, keep the default choice &amp;ldquo;
&lt;a href=&#34;https://rdrr.io/r/base/tilde.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;~&lt;/code&gt;&lt;/a&gt;&amp;rdquo; (i.e., &lt;em&gt;home&lt;/em&gt;), which is the directory you started in when entering the RStudio Server session.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After RStudio automatically reloads, you should see the file ending in &lt;code&gt;.Rproj&lt;/code&gt; in the RStudio &lt;code&gt;Files&lt;/code&gt; tab in the lower right pane, and you will have the Project open. All done for now!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(For future Code Club sessions: RStudio will by default reopen the most recently used Project, and therefore, OSC users will have the Project automatically opened. If you&amp;rsquo;re working locally and are also using other Projects, you can open this Project with &lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;Open Project&lt;/code&gt; inside RStudio, or by clicking the &lt;code&gt;.Rproj&lt;/code&gt; file in your file browser, which will open RStudio &lt;em&gt;and&lt;/em&gt; the Project.)&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2---orienting-ourselves&#34;&gt;2 - Orienting ourselves&lt;/h2&gt;
&lt;h4 id=&#34;where-are-we&#34;&gt;Where are we?&lt;/h4&gt;
&lt;p&gt;We don&amp;rsquo;t need to set our working directory, because our newly created Project is open, and therefore, our working directory is the directory that contains the &lt;code&gt;.Rproj&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;To see where you are, type or copy into the console (bottom left):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# Print the working directory:&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/getwd.html&#39;&gt;getwd&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# List the files in your current directory:&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/list.files.html&#39;&gt;dir&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;          &lt;span class=&#39;c&#39;&gt;# This should print at least the `.RProj` file.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&#34;create-directories&#34;&gt;Create directories&lt;/h4&gt;
&lt;p&gt;Create two new directories &amp;ndash; one for this session, and one for a dataset that we will download shortly (and will be reusing across sessions):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# Dir for Code Club Session 1:&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/files2.html&#39;&gt;dir.create&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;S01&#34;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# Dir for our bird data:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;# (&#34;recursive&#34; to create two levels at once.)&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/files2.html&#39;&gt;dir.create&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&#34;data/birds/&#34;&lt;/span&gt;, recursive &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;TRUE&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&#34;create-a-script&#34;&gt;Create a script&lt;/h4&gt;
&lt;p&gt;To keep a record of what we are doing, and to easily modify and rerun earlier commands, we&amp;rsquo;ll want to save our commands in a script and execute them from there, rather than typing our commands directly in the console.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Click &lt;code&gt;File&lt;/code&gt; (top menu bar) &amp;gt; &lt;code&gt;New File&lt;/code&gt; &amp;gt; &lt;code&gt;R script&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save the script (&lt;code&gt;File&lt;/code&gt; &amp;gt; &lt;code&gt;Save&lt;/code&gt;) as &lt;code&gt;S01.R&lt;/code&gt; inside your &lt;code&gt;S01&lt;/code&gt; directory.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;first-line-of-the-script&#34;&gt;First line of the script&lt;/h4&gt;
&lt;p&gt;We will now load the core set of 8 &lt;em&gt;tidyverse&lt;/em&gt; packages all at once. To do so, type/copy the command below on the first line of the script, and then &lt;strong&gt;execute it&lt;/strong&gt; by clicking &lt;code&gt;Run&lt;/code&gt; (top right of script pane) or by pressing &lt;code&gt;Ctrl Enter&lt;/code&gt; (Windows/Linux, this should also work in your browser) or &lt;code&gt;⌘ Enter&lt;/code&gt; (Mac).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# If you&#39;re working locally, and did not install it yet:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;# install.packages(&#34;tidyverse&#34;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# Load the tidyverse (meta)package:&lt;/span&gt;
&lt;span class=&#39;kr&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/library.html&#39;&gt;library&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;&lt;a href=&#39;http://tidyverse.tidyverse.org&#39;&gt;tidyverse&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Attaching packages&lt;/span&gt;&lt;span&gt; ─────────────────────────────────────── tidyverse 1.3.0 ──&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;ggplot2&lt;/span&gt;&lt;span&gt; 3.3.2     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;purrr  &lt;/span&gt;&lt;span&gt; 0.3.4&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;tibble &lt;/span&gt;&lt;span&gt; 3.0.4     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr  &lt;/span&gt;&lt;span&gt; 1.0.2&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;tidyr  &lt;/span&gt;&lt;span&gt; 1.1.2     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stringr&lt;/span&gt;&lt;span&gt; 1.4.0&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;readr  &lt;/span&gt;&lt;span&gt; 1.3.1     &lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;✔&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;forcats&lt;/span&gt;&lt;span&gt; 0.5.0&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; ── &lt;span style=&#39;font-weight: bold;&#39;&gt;Conflicts&lt;/span&gt;&lt;span&gt; ────────────────────────────────────────── tidyverse_conflicts() ──&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;filter()&lt;/span&gt;&lt;span&gt; masks &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;&lt;span&gt;::filter()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; &lt;span style=&#39;color: #BB0000;&#39;&gt;✖&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;dplyr&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span style=&#39;color: #00BB00;&#39;&gt;lag()&lt;/span&gt;&lt;span&gt;    masks &lt;/span&gt;&lt;span style=&#39;color: #0000BB;&#39;&gt;stats&lt;/span&gt;&lt;span&gt;::lag()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If this worked, you should get the same output as shown in the code block above: it attached 8 packages, and it warns that some of its functions are now &amp;ldquo;masking&amp;rdquo; base R functions.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;p&gt;The &lt;em&gt;tidyverse&lt;/em&gt; is a very popular and useful ecosystem of R packages for data analysis, which we will be using a lot in Code Club.&lt;/p&gt;
&lt;p&gt;When we refer to &amp;ldquo;&lt;em&gt;base R&lt;/em&gt;&amp;rdquo; as opposed to the &lt;em&gt;tidyverse&lt;/em&gt;, we mean functions that are loaded in R by default (without loading a package), and that can perform similar operations in a different way.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3---getting-our-dataset&#34;&gt;3 - Getting our dataset&lt;/h2&gt;
&lt;p&gt;We downloaded a Great Backyard Bird Count (GBBC) 
&lt;a href=&#34;https://www.gbif.org/dataset/82cb293c-f762-11e1-a439-00145eb45e9a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dataset&lt;/a&gt; from the 
&lt;a href=&#34;https://www.gbif.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Global Biodiversity Information Facility (GBIF)&lt;/a&gt;. Because the file was 3.1 GB large, we selected only the records from Ohio and removed some uninformative columns. We also added columns with English names and the breeding range for each species. We&amp;rsquo;ll download the resulting much smaller file (41.5 MB) from our Github repo.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;h3 id=&#34;the-great-backyard-bird-count&#34;&gt;The Great Backyard Bird Count&lt;/h3&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=GBBC_screenshot.png width=&#34;95%&#34;&gt;
&lt;/p&gt;
&lt;p&gt;The 
&lt;a href=&#34;https://gbbc.birdcount.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GBBC&lt;/a&gt; is an annual citizen science event where everyone is encouraged to to identify and count birds in their backyard &amp;ndash; or anywhere else &amp;ndash; for at least 15 minutes, and report their sightings online. Since 2013, it is a global event, but it has been organized in the US and Canada since 1998.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;download-the-data&#34;&gt;Download the data&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s download the dataset using the 
&lt;a href=&#34;https://rdrr.io/r/utils/download.file.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;download.file()&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# The URL to our file:&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;birds_file_url&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;https://raw.githubusercontent.com/biodash/biodash.github.io/master/assets/data/birds/backyard-birds_Ohio.tsv&#34;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# The path to the file we want to download to:&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;birds_file&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;data/birds/backyard-birds_Ohio.tsv&#34;&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# Download:&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/download.file.html&#39;&gt;download.file&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;url &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;birds_file_url&lt;/span&gt;, destfile &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;birds_file&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&#34;read-the-data&#34;&gt;Read the data&lt;/h4&gt;
&lt;p&gt;Now, let&amp;rsquo;s read the file into R. The &lt;code&gt;.tsv&lt;/code&gt; extension (&amp;ldquo;tab-separated values&amp;rdquo;) tells us this is a plain text file in which columns are separated by tabs, so we will use a convenience function from the &lt;em&gt;readr&lt;/em&gt; package (which is loaded as part of the core set &lt;em&gt;tidyverse&lt;/em&gt; packages) for exactly this type of file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# Read the data:&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;birds&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;read_tsv&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;file &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;birds_file&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Parsed with column specification:&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; cols(&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   class = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   order = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   family = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   genus = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   species = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   locality = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   stateProvince = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   decimalLatitude = &lt;span style=&#39;color: #00BB00;&#39;&gt;col_double()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   decimalLongitude = &lt;span style=&#39;color: #00BB00;&#39;&gt;col_double()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   eventDate = &lt;span style=&#39;color: #0000BB;&#39;&gt;col_datetime(format = &#34;&#34;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   species_en = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt;   range = &lt;span style=&#39;color: #BB0000;&#39;&gt;col_character()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Done! We have now read our data into a &lt;em&gt;tibble&lt;/em&gt;, which is a type of data frame (formally a &lt;em&gt;data.frame&lt;/em&gt;): R&amp;rsquo;s object class to deal with tabular data wherein each column can contain a different type of data (numeric, characters/strings, etc).&lt;/p&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4---exploring-backyard-birds&#34;&gt;4 - Exploring backyard birds&lt;/h2&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;h3 id=&#34;exercise-1&#34;&gt;Exercise 1&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s in the dataset?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Explore the dataset using some functions and methods you may know to get a quick overview of data(frames), and try to understand what you see. What does a single row represent, and what is in each column? (Be sure to check out the hints below at some point, especially if you&amp;rsquo;re stuck.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pay attention to the data types (e.g., &amp;ldquo;character&amp;rdquo; or &lt;code&gt;chr&lt;/code&gt;) of the different columns, which several of these functions print. The output of our &lt;code&gt;read_tsv()&lt;/code&gt; command also printed this information &amp;ndash; this function parsed our columns as the types we see now. Were all the columns parsed correctly?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How many rows and how many columns does the dataset have?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What are some questions you would like to explore with this dataset? We&amp;rsquo;ll collect some of these and try to answer them in later sessions. If your group has sufficient R skills already, you are also welcome to go ahead and try to answer one or more of these questions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt; &lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# Type an object&#39;s name to print it to screen:&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;birds&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;# Same as above, but explicitly calling print():&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/print.html&#39;&gt;print&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;birds&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;   

&lt;span class=&#39;c&#39;&gt;# For column-wise information (short for &#34;structure&#34;):&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/str.html&#39;&gt;str&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;birds&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;# tidyverse version of str():&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;glimpse&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;birds&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# In RStudio, open object in a separate tab:&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/View.html&#39;&gt;View&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;birds&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Note that in R, &lt;code&gt;dbl&lt;/code&gt; (for &amp;ldquo;double&amp;rdquo;) and &lt;code&gt;num&lt;/code&gt; (for &amp;ldquo;numeric&amp;rdquo;) are both used, and almost interchangeably so, for floating point numbers. (Integers are a separate type that are simply called &amp;ldquo;integers&amp;rdquo; and abbreviated as &lt;code&gt;int&lt;/code&gt;, but we have no integer columns in this dataset.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;read_tsv()&lt;/code&gt; parsed our date as a &amp;ldquo;date-time&amp;rdquo; (&lt;code&gt;dttm&lt;/code&gt; or &lt;code&gt;POSIXct&lt;/code&gt; for short), which contains both a date and a time. In our case, it looks like the time is always &amp;ldquo;00:00:00&amp;rdquo; and thus doesn&amp;rsquo;t provide any information.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solutions (click here) &lt;/summary&gt; &lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# Just printing the glimpse() output,&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;# which will show the number of rows and columns:&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;glimpse&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;birds&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; Rows: 311,441&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; Columns: 12&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ class            &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt; &#34;Aves&#34;, &#34;Aves&#34;, &#34;Aves&#34;, &#34;Aves&#34;, &#34;Aves&#34;, &#34;Aves&#34;, &#34;Ave…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ order            &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt; &#34;Passeriformes&#34;, &#34;Passeriformes&#34;, &#34;Passeriformes&#34;, &#34;…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ family           &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt; &#34;Corvidae&#34;, &#34;Corvidae&#34;, &#34;Corvidae&#34;, &#34;Corvidae&#34;, &#34;Cor…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ genus            &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt; &#34;Cyanocitta&#34;, &#34;Cyanocitta&#34;, &#34;Cyanocitta&#34;, &#34;Cyanocitt…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ species          &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt; &#34;Cyanocitta cristata&#34;, &#34;Cyanocitta cristata&#34;, &#34;Cyano…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ locality         &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt; &#34;44805 Ashland&#34;, &#34;45244 Cincinnati&#34;, &#34;44132 Euclid&#34;,…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ stateProvince    &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt; &#34;Ohio&#34;, &#34;Ohio&#34;, &#34;Ohio&#34;, &#34;Ohio&#34;, &#34;Ohio&#34;, &#34;Ohio&#34;, &#34;Ohi…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ decimalLatitude  &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt; 40.86166, 39.10666, 41.60768, 39.24236, 39.28207, 41…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ decimalLongitude &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dbl&amp;gt;&lt;/span&gt;&lt;span&gt; -82.31558, -84.32972, -81.50085, -84.35545, -84.4688…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ eventDate        &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;dttm&amp;gt;&lt;/span&gt;&lt;span&gt; 2007-02-16, 2007-02-17, 2007-02-17, 2007-02-19, 200…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ species_en       &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt; &#34;Blue Jay&#34;, &#34;Blue Jay&#34;, &#34;Blue Jay&#34;, &#34;Blue Jay&#34;, &#34;Blu…&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#39;c&#39;&gt;#&amp;gt; $ range            &lt;span style=&#39;color: #555555;font-style: italic;&#39;&gt;&amp;lt;chr&amp;gt;&lt;/span&gt;&lt;span&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# You can also check the number of rows and columns directly using:&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/dim.html&#39;&gt;dim&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;birds&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;          &lt;span class=&#39;c&#39;&gt;# Will return the number of rows and columns&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 311441     12&lt;/span&gt;


&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/nrow.html&#39;&gt;nrow&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;birds&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;         &lt;span class=&#39;c&#39;&gt;# Will return the number of rows&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 311441&lt;/span&gt;

&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/base/nrow.html&#39;&gt;ncol&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;nv&#39;&gt;birds&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;         &lt;span class=&#39;c&#39;&gt;# Will return the number of columns&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;#&amp;gt; [1] 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;h2 id=&#34;bonus-material&#34;&gt;Bonus material&lt;/h2&gt;
&lt;p&gt;If your breakout group is done with Exercise 1, you can have a look at the bonus material below which includes another exercise. You can also have a look at this as homework. Or not at all!&lt;/p&gt;
&lt;br&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;h3 id=&#34;readr-options-for-challenging-files&#34;&gt;&lt;code&gt;readr&lt;/code&gt; options for challenging files&lt;/h3&gt;
&lt;p&gt;Earlier, we successfully read in our file without specifying any arguments other than the file name to the &lt;code&gt;read_tsv()&lt;/code&gt; function, i.e. with all the default options. It is not always this easy!&lt;/p&gt;
&lt;p&gt;Some options for more complex cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The more general counterpart of this function is &lt;code&gt;read_delim()&lt;/code&gt;, which allows you to specify the delimiter using the &lt;code&gt;sep&lt;/code&gt; argument, e.g. &lt;code&gt;delim=&amp;quot;\t&amp;quot;&lt;/code&gt; for tabs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are also arguments to these functions for when you need to skip lines, when you don&amp;rsquo;t have column headers, when you need to specify the column types of some or all the columns, and so forth &amp;ndash; see this example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;nv&#39;&gt;my_df&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;read_delim&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;
  file &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;file.txt&#34;&lt;/span&gt;,
  delim &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;\t&#34;&lt;/span&gt;,             &lt;span class=&#39;c&#39;&gt;# Specify tab as delimiter&lt;/span&gt;
  col_names &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;kc&#39;&gt;FALSE&lt;/span&gt;,        &lt;span class=&#39;c&#39;&gt;# First line is not a header&lt;/span&gt;
  skip &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;3&lt;/span&gt;,                 &lt;span class=&#39;c&#39;&gt;# Skip the first three lines&lt;/span&gt;
  comment &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;#&#34;&lt;/span&gt;,            &lt;span class=&#39;c&#39;&gt;# Skip any line beginning with a &#34;#&#34;&lt;/span&gt;
  col_types &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;cols&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;         &lt;span class=&#39;c&#39;&gt;# Specify column types&lt;/span&gt;
    col1 &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;col_character&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;c&#39;&gt;# ..We only need to specify columns for &lt;/span&gt;
    col2 &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;col_double&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;     &lt;span class=&#39;c&#39;&gt;# ..which we need non-automatic typing&lt;/span&gt;
    &lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class=&#34;puzzle&#34;&gt;
&lt;h3 id=&#34;exercise-2-optional&#34;&gt;Exercise 2 (Optional)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Read this file!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Try to read the following file into R, which is a modified and much smaller version of the bird dataset.&lt;/p&gt;
&lt;p&gt;Make the function parse the &amp;ldquo;order&amp;rdquo; column as a factor, and the &amp;ldquo;year&amp;rdquo;, &amp;ldquo;month&amp;rdquo;, and &amp;ldquo;day&amp;rdquo; columns as whatever you think is sensible.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# Download and read the file:&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;birds2_file_url&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;https://raw.githubusercontent.com/biodash/biodash.github.io/master/assets/data/birds/backyard-birds_read-challenge.txt&#34;&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;birds2_file&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;data/birds/backyard-birds_read-challenge.txt&#34;&lt;/span&gt;
&lt;span class=&#39;nf&#39;&gt;&lt;a href=&#39;https://rdrr.io/r/utils/download.file.html&#39;&gt;download.file&lt;/a&gt;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;url &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;birds2_file_url&lt;/span&gt;, destfile &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;birds2_file&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# Your turn!&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;birds2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;read_&lt;/span&gt;    &lt;span class=&#39;c&#39;&gt;# Complete the command&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;details&gt;
&lt;summary&gt; Hints (click here) &lt;/summary&gt; &lt;br&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The file is saved as &lt;code&gt;.txt&lt;/code&gt;, so the delimiter is not obvious &amp;ndash; first have a look at it (open it in RStudio, a text editor, or the terminal) to determine the delimiter. Then, use &lt;code&gt;read_delim()&lt;/code&gt; with manual specification of the delimiter using the &lt;code&gt;delim&lt;/code&gt; argument, or use a specialized convenience function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Besides a leading line with no data, there is another problematic line further down. You will need both the &lt;code&gt;skip&lt;/code&gt; and &lt;code&gt;comment&lt;/code&gt; arguments to circumvent these.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that &lt;em&gt;readr&lt;/em&gt; erroneously parses &lt;code&gt;month&lt;/code&gt; as a character column if you don&amp;rsquo;t manually specify its type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that you can also use a succinct column type specification like &lt;code&gt;col_types = &amp;quot;fc&amp;quot;&lt;/code&gt;, which would parse, for a two-column file, the first column as a factor and the second as a character &amp;ndash; type e.g. &lt;code&gt;?read_tsv&lt;/code&gt; for details.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Bare solution (click here) &lt;/summary&gt; &lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# With succint column type specification:&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;birds2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;read_csv&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;
  file &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;birds2_file&lt;/span&gt;,
  skip &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;,
  comment &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;$&#34;&lt;/span&gt;,
  col_types &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;fcdiii&#34;&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# With long column type specification:&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;birds2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;read_csv&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;
  file &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;birds2_file&lt;/span&gt;,
  skip &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;,
  comment &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;$&#34;&lt;/span&gt;,
  col_types &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;cols&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;
    order &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;col_factor&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
    year &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;  &lt;span class=&#39;nf&#39;&gt;col_integer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
    month &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;col_integer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
    day &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;col_integer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;details&gt;
&lt;summary&gt; Solution with explanations (click here) &lt;/summary&gt; &lt;br&gt;
&lt;div class=&#34;highlight&#34;&gt;
&lt;pre class=&#39;chroma&#39;&gt;&lt;code class=&#39;language-r&#39; data-lang=&#39;r&#39;&gt;&lt;span class=&#39;c&#39;&gt;# With succinct column type specification:&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;birds2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;read_csv&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;     &lt;span class=&#39;c&#39;&gt;# `read_csv()`: file is comma-delimited&lt;/span&gt;
  file &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;birds2_file&lt;/span&gt;,
  skip &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;,             &lt;span class=&#39;c&#39;&gt;# First line is not part of the dataframe&lt;/span&gt;
  comment &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;$&#34;&lt;/span&gt;,        &lt;span class=&#39;c&#39;&gt;# Line 228 is a comment that starts with `$`&lt;/span&gt;
  col_types &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;fcdiii&#34;&lt;/span&gt;  &lt;span class=&#39;c&#39;&gt;# &#34;f&#34; for factor, &#34;c&#34; for character,&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;                     &lt;span class=&#39;c&#39;&gt;# ..&#34;d&#34; for double (=numeric),&lt;/span&gt;
                        &lt;span class=&#39;c&#39;&gt;# ..&#34;i&#34; for integer.&lt;/span&gt;

&lt;span class=&#39;c&#39;&gt;# With long column type specification:&lt;/span&gt;
&lt;span class=&#39;nv&#39;&gt;birds2&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;read_csv&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;
  file &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nv&#39;&gt;birds2_file&lt;/span&gt;,
  skip &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;m&#39;&gt;1&lt;/span&gt;,
  comment &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&#34;$&#34;&lt;/span&gt;,
  col_types &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;cols&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;        &lt;span class=&#39;c&#39;&gt;# We can omit columns for which we&lt;/span&gt;
    order &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;col_factor&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,  &lt;span class=&#39;c&#39;&gt;# ..accept the automatic parsing,&lt;/span&gt;
    year &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt;  &lt;span class=&#39;nf&#39;&gt;col_integer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;, &lt;span class=&#39;c&#39;&gt;# ..when using the long specification. &lt;/span&gt;
    month &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;col_integer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;,
    day &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;col_integer&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
  &lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
&lt;div&gt;
&lt;h3 id=&#34;other-options-for-reading-tabular-data&#34;&gt;Other options for reading tabular data&lt;/h3&gt;
&lt;p&gt;There are also functions in &lt;em&gt;base R&lt;/em&gt; that read tabular data, such as 
&lt;a href=&#34;https://rdrr.io/r/utils/read.table.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;read.table()&lt;/code&gt;&lt;/a&gt; and 
&lt;a href=&#34;https://rdrr.io/r/utils/read.table.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;read.delim()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These are generally slower than the &lt;em&gt;readr&lt;/em&gt; functions, and have less sensible default options to their arguments. Particularly relevant is how columns with characters (strings) are parsed &amp;ndash; until R 4.0, which was released earlier this year, base R&amp;rsquo;s default behavior was to parse them as &lt;strong&gt;factors&lt;/strong&gt;, and this is generally not desirable&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. &lt;em&gt;readr&lt;/em&gt; functions will never convert columns with strings to factors.&lt;/p&gt;
&lt;p&gt;If speed is important, such as when reading in very large files (~ 100s of MBs or larger), you should consider using the &lt;code&gt;fread()&lt;/code&gt; function from the &lt;em&gt;data.table&lt;/em&gt; package.&lt;/p&gt;
&lt;p&gt;Finally, some examples of reading other types of files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read excel files directly using the &lt;em&gt;readxl&lt;/em&gt; package.&lt;/li&gt;
&lt;li&gt;Read Google Sheets directly from the web using the &lt;em&gt;googlesheets4&lt;/em&gt; package.&lt;/li&gt;
&lt;li&gt;Read non-tabular data using the base R 
&lt;a href=&#34;https://rdrr.io/r/base/readLines.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;readLines()&lt;/code&gt;&lt;/a&gt; function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;You can check which version of R you are running by typing 
&lt;a href=&#34;https://rdrr.io/r/utils/sessionInfo.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;sessionInfo()&lt;/code&gt;&lt;/a&gt;. You can also check directly how strings are read by default with 
&lt;a href=&#34;https://rdrr.io/r/base/data.frame.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;default.stringsAsFactors()&lt;/code&gt;&lt;/a&gt;. To avoid conversion to factors, specify &lt;code&gt;stringsAsFactors = FALSE&lt;/code&gt; in your 
&lt;a href=&#34;https://rdrr.io/r/utils/read.table.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;read.table()&lt;/code&gt;&lt;/a&gt; / 
&lt;a href=&#34;https://rdrr.io/r/utils/read.table.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;read.delim()&lt;/code&gt;&lt;/a&gt; function call. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to Code Club</title>
      <link>https://biodash.github.io/codeclub/00_welcome-to-codeclub/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://biodash.github.io/codeclub/00_welcome-to-codeclub/</guid>
      <description>&lt;hr&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;Welcome to OSU Code Club! Materials for each episode will be provided in posts like this one,
collected in the 
&lt;a href=&#34;https://biodash.github.io/codeclub/&#34;&gt;Code Club Sessions page&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For more information about OSU Code Club, and a form to sign up,
see the 
&lt;a href=&#34;https://biodash.github.io/codeclub-about/&#34;&gt;About Code Club page&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For info on upcoming sessions, see 
&lt;a href=&#34;https://biodash.github.io/codeclub-schedule/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can code locally or in your browser, see our 
&lt;a href=&#34;https://biodash.github.io/codeclub-setup/&#34;&gt;page with computer setup instructions&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are completely new to R, see our 
&lt;a href=&#34;https://biodash.github.io/codeclub-novice/&#34;&gt;page with resources and tips&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also 
&lt;a href=&#34;https://biodash.github.io/codeclub-suggest/&#34;&gt;suggest a topic to be covered at Code Club&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt; &lt;br/&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
